[
  {
    "objectID": "renabap.html",
    "href": "renabap.html",
    "title": "3  RENABAP",
    "section": "",
    "text": "3.1 Resumen ejecutivo\nEste análisis utiliza el conjunto de datos global de huellas de edificios para mejorar las estimaciones de exposición a peligros de inundación en asentamientos informales en La Plata.\n⚠️ Los datos del RENABAP subestiman dramáticamente la población en asentamientos informales, con aproximadamente 41,575 viviendas faltantes no contabilizadas en las estadísticas oficiales. Esto representa entre 125,000 y 208,000 personas no contabilizadas, lo cual es fundamental para comprender la verdadera magnitud de la exposición a inundaciones en La Plata.\n📊 Encontramos que 17,014 edificios están expuestas a peligros de inundación (23.9% del total) bajo el escenario de Precipitación Máxima Probable (PMP), con 6,112 en zonas de peligro alto y 10,902 en peligro medio. Villa Montoro presenta la mayor exposición con 669 edificios en peligro alto (21.7% del barrio), seguido por La Esperanza con 440 edificios (16.3%), Las Palmeras con 417 (33.7%), Toba con 335 (67.7%), y La Isla con 320 edificios (96.4%). A nivel de cuencas, la Cuenca Arroyo del Gato concentra la mayor exposición con 7,943 edificios expuestos.\n🔄 El análisis de diferentes períodos de retorno para la Cuenca Maldonado revela que la elección del período genera diferencias significativas en las estimaciones de exposición, siendo crucial para determinar qué áreas priorizar para la reubicación de residentes en asentamientos informales.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  },
  {
    "objectID": "renabap.html#resumen-ejecutivo",
    "href": "renabap.html#resumen-ejecutivo",
    "title": "3  RENABAP",
    "section": "",
    "text": "📥 Descargar los datos de exposición de edificios a nivel de barrio\n📥 Descargar los datos de exposición de edificios a nivel de cuenca y eje",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  },
  {
    "objectID": "renabap.html#objetivos",
    "href": "renabap.html#objetivos",
    "title": "3  RENABAP",
    "section": "3.2 Objetivos",
    "text": "3.2 Objetivos\nEste proyecto tiene tres objetivos principales:\n\nEncontrar metodologías más precisas para evaluar la población expuesta en barrios populares - Desarrollar y aplicar técnicas de análisis espacial que superen las limitaciones de la interpolación areal tradicional, utilizando datos de huellas de edificios para obtener estimaciones más precisas de la exposición a peligros de inundación en asentamientos informales, y demostrar las limitaciones significativas de los datos oficiales del RENABAP que subestiman dramáticamente el número de viviendas y población.\nAportar y precisar el mapeo de riesgo hídrico en el Partido de La Plata - Mejorar la comprensión de la distribución espacial del riesgo de inundación mediante el análisis de la exposición de edificios individuales, proporcionando información detallada para la toma de decisiones a nivel municipal y la planificación de políticas de reducción de riesgo.\nPoner en cuestión las recurrencias utilizadas en el cálculo de riesgo según la política considerada y evidenciar errores u omisiones en datos oficiales - Evaluar críticamente los períodos de retorno utilizados en los modelos de peligrosidad y examinar la importancia de la precisión de los datos considerados, tanto en términos de la exactitud de los datos del RENABAP como de los datos de peligros de inundación, para una evaluación adecuada del riesgo.\n\n\n\nMostrar código\nimport matplotlib.pyplot as plt\n\nfrom io import StringIO\nfrom shapely.geometry import box\nimport geopandas as gpd\nimport requests\nimport os\n\nimport itables\nfrom itables import show\nfrom IPython.display import HTML, display\n\nfrom matplotlib_map_utils import north_arrow, scale_bar, ScaleBar\n\nfrom matplotlib.patches import Patch\n\n\nfrom shapely.ops import unary_union\nimport contextily as cx\n\n# Global settings for international number formatting\nimport locale\nimport pandas as pd\nimport numpy as np\n\n# Set locale for international number formatting (period for thousands, comma for decimal)\ntry:\n    locale.setlocale(locale.LC_ALL, 'es_AR.UTF-8')\nexcept locale.Error:\n    try:\n        locale.setlocale(locale.LC_ALL, 'es_ES.UTF-8')\n    except locale.Error:\n        locale.setlocale(locale.LC_ALL, '')\n\n# Set pandas options for international formatting\npd.set_option('display.float_format', lambda x: f'{x:,.1f}'.replace(',', '.').replace('.', ',', 1))\n\n# Helper function to format numbers with international formatting (periods for thousands, periods for decimals)\ndef format_number(num, decimals=None):\n    if decimals is None:\n        # Integer formatting - just thousands separators\n        return f\"{num:,}\".replace(\",\", \".\")\n    else:\n        # Decimal formatting - thousands separators and decimal period\n        return f\"{num:,.{decimals}f}\".replace(\",\", \".\")\n\nfrom utils.utils import (\n    add_scale_bar_and_north_arrow,\n    add_basemap,\n    add_boundary_outline,\n    create_consistent_map,\n    wfs_to_gdf,\n    fetch_buildings,\n)\n\nScaleBar.set_size(size=\"md\")\n\n# Configure Argentine Spanish for itables\ntry:\n    spanish_url = \"https://cdn.datatables.net/plug-ins/2.3.3/i18n/es-AR.json\"\n    response = requests.get(spanish_url)\n    response.raise_for_status()\n    spanish_config = response.json()\n    itables.options.language = spanish_config\nexcept Exception:\n    pass\n\n# Configure smaller font size for all itables\ncss = \"\"\"\n.dt-container {\n  font-size: small;\n}\n\"\"\"\ndisplay(HTML(f\"&lt;style&gt;{css}&lt;/style&gt;\"))\n\n\n# Helper function to round numeric columns for display\ndef round_numeric_columns(df, decimals=0):\n    \"\"\"Round all numeric columns in a DataFrame to specified decimal places.\"\"\"\n    df_display = df.copy()\n    numeric_columns = df_display.select_dtypes(include=[np.number]).columns\n    df_display[numeric_columns] = df_display[numeric_columns].round(decimals)\n    return df_display\n\ndef add_scale_bar_and_north_arrow(\n    ax, location=\"upper right\", scale_color=\"black\", arrow_color=\"black\", length=None\n):\n    \"\"\"Add a scale bar and north arrow to the map using matplotlib_map_utils.\"\"\"\n    # Add scale bar using matplotlib_map_utils ScaleBar class with ticks style\n    scale_bar(\n        ax=ax,\n        location=\"upper left\",\n        style=\"ticks\",\n        bar={\n            \"projection\": \"EPSG:3857\",\n            \"tickcolors\": scale_color,\n            \"basecolors\": scale_color,\n            \"minor_type\": \"none\",\n            \"length\": length,\n        },\n        labels={\"style\": \"first_last\"},\n    )\n\n    # Add north arrow using matplotlib_map_utils\n    north_arrow(\n        ax,\n        location=location,\n        scale=0.3,  # Small size\n        rotation={\"degrees\": 0},\n        base={\"facecolor\": \"none\", \"edgecolor\": arrow_color, \"linewidth\": 1},\n        fancy=True,\n        shadow=True,\n        label=False,  # Hide the \"N\" text\n    )\n\ndef setup_base_map(\n    use_crs, figsize=None, bounds=None, boundary_gdf=None, padding_x=None, padding_y=None\n):\n    \"\"\"Create figure and set up basic map boundaries with padding.\"\"\"\n    if figsize is None:\n        figsize = DEFAULT_FIGSIZE\n    if padding_x is None:\n        padding_x = MAP_PADDING\n    if padding_y is None:\n        padding_y = MAP_PADDING\n\n    if bounds is None and boundary_gdf is not None:\n        bounds = boundary_gdf.total_bounds\n\n    # Convert bounds to Web Mercator for basemap compatibility\n    if bounds is not None:\n        # Create a temporary GeoDataFrame with the bounds to reproject\n        temp_bounds = gpd.GeoDataFrame(\n            geometry=[box(bounds[0], bounds[1], bounds[2], bounds[3])], crs=use_crs\n        )\n        bounds_3857 = temp_bounds.to_crs(WEB_MERCATOR_CRS).total_bounds\n    else:\n        bounds_3857 = bounds\n\n    fig, ax = plt.subplots(figsize=figsize)\n    ax.set_xlim(bounds_3857[0] - padding_x, bounds_3857[2] + padding_x)\n    ax.set_ylim(bounds_3857[1] - padding_y, bounds_3857[3] + padding_y)\n    return fig, ax\n\ndef create_consistent_map(title, crs, boundary_gdf=None, bounds=None, attribution=None, scalebar_length=None):\n    \"\"\"Create a map with consistent styling and basemap.\"\"\"\n    fig, ax = setup_base_map(crs, bounds=bounds, boundary_gdf=boundary_gdf)\n\n    add_basemap(ax, attribution=attribution)\n\n    add_scale_bar_and_north_arrow(ax, length=scalebar_length)\n\n    add_boundary_outline(ax, boundary_gdf)\n\n    ax.set_title(title, fontsize=16, fontweight=\"bold\", pad=20)\n\n    ax.set_axis_off()\n\n    return fig, ax\n\n\n\n# =============================================================================\n# CONSTANTES Y CONFIGURACIÓN\n# =============================================================================\n\nUSE_CRS = \"EPSG:5349\"  # POSGAR 2007 / Argentina 4\nWEB_MERCATOR_CRS = \"EPSG:3857\"  # visualization\nWGS84_CRS = \"EPSG:4326\"  # for API calls\n\nBASE_PATH = \"/home/nissim/Documents/dev/fulbright/ciut-riesgo\"\nDATA_PATH = f\"{BASE_PATH}/notebooks/data\"\nPELIGRO_PATH = f\"{DATA_PATH}/la_plata_pelig_2023_datos_originales.geojson\"\nPARTIDOS_PATH = f\"{DATA_PATH}/pba_partidos.geojson\"\nCUENCAS_PATH = f\"{BASE_PATH}/notebooks/cuencas_buenos_aires.geojson\"\nBUILDINGS_PATH = f\"{BASE_PATH}/notebooks/buildings_filtered.parquet\"\n\nRENABAP_URL = (\n    \"https://www.argentina.gob.ar/sites/default/files/renabap-2023-12-06.geojson\"\n)\nPARTIDOS_WFS_URL = \"https://geo.arba.gov.ar/geoserver/idera/wfs\"\nCUENCAS_API_URL = \"https://services1.arcgis.com/atxllciEI8CHWvwW/ArcGIS/rest/services/Cuencas_BuenosAires_2023/FeatureServer/0/query\"\n\n\n# Basic visualization settings (only for repeated values)\nDEFAULT_FIGSIZE = (12, 10)\nMAP_PADDING = 500\nPLASMA_CMAP = plt.cm.plasma\n\n# Color schemes for visualization\nPELIGROSIDAD_COLORS = {\n    \"alta\": PLASMA_CMAP(0.5),\n    \"media\": PLASMA_CMAP(0.8),\n}\n\n\nPELIGROSIDAD_LEGEND = [\n    Patch(facecolor=color, label=label) for label, color in PELIGROSIDAD_COLORS.items()\n]\n\n\n# Eje mapping for watershed analysis\nEJE_MAPPING = {\n    \"noreste\": [\"Area de Bañados\", \"Cuenca Arroyo Rodriguez-Don Carlos\"],\n    \"noroeste\": [\"Cuenca Arroyo Martín-Carnaval\", \"Cuenca Arroyo Pereyra\"],\n    \"central\": [\"Cuenca Arroyo del Gato\"],\n    \"sudoeste\": [\"Cuenca A° Maldonado\", \"Cuenca Río Samborombón\"],\n    \"sudeste\": [\"Cuenca Arroyo El Pescado\"],\n}\n\n\n\n\n\n# =============================================================================\n# DATA LOADING AND PREPROCESSING\n# =============================================================================\n\nresponse = requests.get(RENABAP_URL)\nrenabap = gpd.read_file(StringIO(response.text))\nrenabap_pba = renabap[renabap[\"provincia\"] == \"Buenos Aires\"]\nrenabap_pba = renabap_pba.to_crs(USE_CRS)\n\n\nif os.path.exists(PARTIDOS_PATH):\n    partidos = gpd.read_file(PARTIDOS_PATH)\nelse:\n    partidos = wfs_to_gdf(\n        wfs_url=PARTIDOS_WFS_URL,\n        layer_name=\"idera:Departamento\",\n        srs=\"EPSG:5347\",\n    )\n\n    partidos.to_file(PARTIDOS_PATH, driver=\"GeoJSON\")\n\npartidos = partidos.to_crs(USE_CRS)\nla_plata = partidos[partidos[\"fna\"] == \"Partido de La Plata\"]\n\n# Obtener la geometría principal\nmain_geom = la_plata.geometry.iloc[0]\n\n# Si es un MultiPolygon, mantener solo el polígono más grande (el partido principal)\n# Esto elimina la pequeña isla que aparece en los datos\nif main_geom.geom_type == \"MultiPolygon\":\n    # Obtener todos los polígonos y mantener el que tenga mayor área\n    largest_polygon = max(main_geom.geoms, key=lambda p: p.area)\n    la_plata = la_plata.copy()  # Create a copy to avoid SettingWithCopyWarning\n    la_plata.loc[la_plata.index[0], \"geometry\"] = largest_polygon\n\nla_plata_bbox = la_plata.geometry.iloc[0]\n\n\npeligro = gpd.read_file(PELIGRO_PATH)\npeligro = peligro.to_crs(USE_CRS)\npeligro = peligro[peligro[\"PELIGROSID\"] != \"baja\"]\n\npeligro_bounds = peligro.total_bounds\npeligro_bbox = box(*peligro_bounds)\n\npeligro_la_plata = peligro.clip(la_plata)\npeligro_clipped_3857 = peligro_la_plata.to_crs(WEB_MERCATOR_CRS)\n\n\nrenabap_pba_intersect = renabap_pba[\n    renabap_pba.geometry.intersects(la_plata_bbox)\n].copy()\n\n\nif os.path.exists(CUENCAS_PATH):\n    cuencas = gpd.read_file(CUENCAS_PATH)\nelse:\n    params = {\"where\": \"1=1\", \"outFields\": \"*\", \"f\": \"geojson\"}\n\n    cuencas_response = requests.get(CUENCAS_API_URL, params=params)\n    with open(CUENCAS_PATH, \"w\", encoding=\"utf-8\") as f:\n        f.write(cuencas_response.text)\n\n    cuencas = gpd.read_file(StringIO(cuencas_response.text))\n\ncuencas = cuencas.to_crs(USE_CRS)\ncuencas = cuencas.clip(la_plata)\n\n# Map watershed names to axes based on the EJE_MAPPING\ncuencas[\"eje\"] = (\n    cuencas[\"Cuenca\"]\n    .map(\n        {\n            cuenca: eje\n            for eje, cuencas_list in EJE_MAPPING.items()\n            for cuenca in cuencas_list\n        }\n    )\n    .fillna(\"otro\")\n)\n\n# Calculate total area of RENABAP settlements in hectares (POSGAR projection is in meters)\nrenabap_total_area_ha = (\n    renabap_pba_intersect.geometry.area.sum() / 10000\n)  # Convert m² to hectares\nla_plata_area_ha = la_plata.geometry.iloc[0].area / 10000\npercentage_coverage = (renabap_total_area_ha / la_plata_area_ha) * 100\n\n# Get common bounds for all maps\ncommon_bounds = la_plata.total_bounds\n\n# Intersect settlements with hazard zones\nsettlement_hazard = gpd.overlay(renabap_pba_intersect, peligro, how=\"intersection\")\n\nsettle_hazard_cuencas = gpd.overlay(\n    settlement_hazard, cuencas, how=\"intersection\", keep_geom_type=True\n)\n\nif os.path.exists(BUILDINGS_PATH):\n    buildings = gpd.read_parquet(BUILDINGS_PATH)\nelse:\n    buildings = fetch_buildings(la_plata.buffer(500))\n\n\nla_plata_buffered = la_plata_bbox.buffer(500)\nbuildings_proj = buildings.to_crs(USE_CRS)\nbuildings_proj = buildings_proj[buildings_proj.geometry.intersects(la_plata_buffered)]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  },
  {
    "objectID": "renabap.html#fuentes-de-datos",
    "href": "renabap.html#fuentes-de-datos",
    "title": "3  RENABAP",
    "section": "3.3 Fuentes de datos",
    "text": "3.3 Fuentes de datos\n\n3.3.1 RENABAP\nEl Registro Nacional de Barrios Populares (RENABAP) es coordinado por la Subsecretaría de Integración Socio Urbana y sistematiza la información sobre villas y asentamientos informales en Argentina. El registro incluye estimaciones de población, delimitaciones geográficas y datos sociodemográficos obtenidos a través de relevamientos territoriales realizados desde 2016 por equipos conformados por organizaciones sociales y vecinos de los barrios.\nEste relevamiento de Viviendas Familiares se realiza mediante encuestas domiciliarias en los barrios populares registrados. La metodología combina trabajo territorial con herramientas digitales como aplicaciones móviles de geolocalización, escaneo de DNI, grabación de encuestas y cartografía editable. Cada polígono barrial se subdivide en manzanas, lotes y edificios, y se releva una ficha por cada vivienda habitada. Los datos son validados con organismos oficiales (RENAPER, ANSES) y sometidos a control de calidad para garantizar su precisión. Por otro lado, las estimaciones poblacionales para la versión 2023 fueron calculadas multiplicando la cantidad de viviendas registradas en el RENABAP por el promedio de personas por vivienda y el promedio de hogares por vivienda, según los datos del Censo Nacional de Hogares Población y Vivienda INDEC 2010 correspondiente a cada barrio. Esto limita significativamente la precisión de los datos demográficos en el contexto de procesos de transformación urbana, ya que los asentamientos informales han experimentado cambios sustanciales desde 2010. Las limitaciones críticas de estos datos se analizan en detalle en la sección correspondiente de este estudio.\nMás información sobre el RENABAP está disponible en el Observatorio de Barrios Populares. Los datos fueron obtenidos a través del Mapa de Barrios Populares y están disponibles para descarga como GeoJSON.\n\n\n3.3.2 Peligro de inundación\nLos datos de peligro de inundación utilizados en este análisis fueron desarrollados por la Facultad de Ingeniería de la Universidad Nacional de La Plata como parte del Plan de Reducción del Riesgo por Inundaciones en la Región de La Plata P. G. Romanazzi, Mena, and Valinoti (2023). El modelo digital de elevación fue actualizado en 2023 para capturar mejor los patrones de drenaje y la topografía urbana de la ciudad (Carner, Ortiz, and Lacunza en prensa). La información fue generada mediante la aplicación del modelo hidrológico-hidráulico bidimensional FLO-2D, que permitió simular la dinámica de inundación de todas las cuencas del partido de La Plata para distintos escenarios de eventos pluviométricos extremos. Este análisis se basa específicamente en los datos de peligrosidad generados para el escenario de Precipitación Máxima Probable (PMP), en contraste con otros períodos de retorno como 25 años, 100 años o 500 años. El modelo calcula las principales variables hidráulicas (altura del agua, velocidad y caudal) a lo largo del tiempo, y a partir de estos resultados se generaron los mapas de peligrosidad que combinan el efecto de la profundidad con la velocidad de la corriente, ofreciendo un indicador más completo que los mapas tradicionales de máximas profundidades.\n\n\n3.3.3 Google-Microsoft-OSM Open Buildings\nLos datos de Google-Microsoft-OSM Open Buildings (VIDA 2023) representan una forma más precisa de evaluar dónde se ubican los asentamientos humanos. Este conjunto de datos combina Google V3 Open Buildings, Microsoft GlobalMLFootprints, y OpenStreetMap building footprints, conteniendo más de 2.7 mil millones de huellas de edificios. Estos datos han sido aplicados a evaluaciones de riesgo de inundación por empresas globales de riesgo financiero como ICE, demostrando su utilidad para mapear la exposición climática a nivel de huella de edificio individual. Sin embargo, en ausencia de información sobre si los edificios son residenciales o tienen otros usos, y sin datos sobre el número total de unidades en el edificio y habitantes por edificio, solo podemos obtener estimaciones proporcionales aproximadas de dónde se ubican las personas, sin tener una comprensión precisa de quién vive realmente allí y cuántas personas.\n\n\n3.3.4 Límites municipales\nLos límites municipales del Partido de La Plata fueron obtenidos del Instituto Geográfico Nacional (IGN) a través de su servidor WFS (Instituto Geográfico Nacional (IGN) 2025). Los datos representan la división político-administrativa de tercer orden que incluye comunas, juntas vecinales y demás formas de gobiernos.\n\n\n3.3.5 Cuencas hidrográficas\nLos datos de cuencas hidrográficas fueron obtenidos de la División Provincial de Hidráulica de la Provincia de Buenos Aires a través de su servidor WFS (División Provincial de Hidráulica - Provincia de Buenos Aires 2025).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  },
  {
    "objectID": "renabap.html#contexto",
    "href": "renabap.html#contexto",
    "title": "3  RENABAP",
    "section": "3.4 Contexto",
    "text": "3.4 Contexto\n\n\nMostrar código\n# Calcular variables para el contexto\ntotal_barrios = int(len(renabap_pba_intersect))\ntotal_familias = int(renabap_pba_intersect[\"familias_aproximadas\"].sum())\narea_barrios_ha = int(renabap_total_area_ha)\nporcentaje_cobertura = float(round(percentage_coverage, 1))\n\n# Calcular barrios que intersectan con zonas de peligro\nbarrios_with_peligro = gpd.sjoin(\n    renabap_pba_intersect, peligro_la_plata, how=\"inner\", predicate=\"intersects\"\n)\n\n# Contar barrios por nivel de peligro\nbarrios_peligro_alta = int(\n    len(\n        barrios_with_peligro[barrios_with_peligro[\"PELIGROSID\"] == \"alta\"][\n            \"id_renabap\"\n        ].unique()\n    )\n)\nbarrios_peligro_media = int(\n    len(\n        barrios_with_peligro[barrios_with_peligro[\"PELIGROSID\"] == \"media\"][\n            \"id_renabap\"\n        ].unique()\n    )\n)\n\n# Contar barrios por tipo de peligro (sin duplicados)\nbarrios_peligro_summary = (\n    barrios_with_peligro.groupby(\"id_renabap\")[\"PELIGROSID\"]\n    .agg([\"nunique\", \"unique\"])\n    .reset_index()\n)\nbarrios_peligro_summary[\"tiene_alta\"] = barrios_peligro_summary[\"unique\"].apply(\n    lambda x: \"alta\" in x\n)\nbarrios_peligro_summary[\"tiene_media\"] = barrios_peligro_summary[\"unique\"].apply(\n    lambda x: \"media\" in x\n)\n\n# Contar barrios por categoría\nbarrios_solo_alta = int(\n    (\n        barrios_peligro_summary[\"tiene_alta\"] & ~barrios_peligro_summary[\"tiene_media\"]\n    ).sum()\n)\nbarrios_solo_media = int(\n    (\n        barrios_peligro_summary[\"tiene_media\"] & ~barrios_peligro_summary[\"tiene_alta\"]\n    ).sum()\n)\nbarrios_ambos_peligros = int(\n    (\n        barrios_peligro_summary[\"tiene_alta\"] & barrios_peligro_summary[\"tiene_media\"]\n    ).sum()\n)\n\n# Total de barrios que intersectan con cualquier nivel de peligro (sin duplicados)\nbarrios_total_peligro = int(len(barrios_with_peligro[\"id_renabap\"].unique()))\n\n# Obtener total de edificios en La Plata\ntotal_buildings_la_plata = len(buildings_proj)\n\n# Obtener todas las edificios que intersectan con los barrios (corregir warning de deprecación)\nbuildings_in_barrios = buildings_proj[\n    buildings_proj.geometry.intersects(renabap_pba_intersect.union_all())\n]\ntotal_buildings_in_barrios = len(buildings_in_barrios)\n\nviviendas_faltantes = (\n    total_buildings_in_barrios - 30753\n)  # 30753 es el número oficial de RENABAP\n\n# Calcular porcentaje de edificios en barrios\nbuildings_percentage = float(\n    round((total_buildings_in_barrios / total_buildings_la_plata) * 100, 1)\n)\n\n# Calcular área total de barrios populares en hectáreas\nbarrios_total_area_ha = float(round(renabap_pba_intersect.geometry.area.sum() / 10000, 1))\n\n# Calcular el área real de superposición entre barrios populares y zonas de peligro\n# Primero, crear uniones de las zonas de peligro por tipo\npeligro_alta_union = peligro_la_plata[peligro_la_plata[\"PELIGROSID\"] == \"alta\"].union_all()\npeligro_media_union = peligro_la_plata[peligro_la_plata[\"PELIGROSID\"] == \"media\"].union_all()\n\n# Calcular el área de superposición real entre barrios y zonas de peligro alto\nbarrios_intersect_alta = renabap_pba_intersect.copy()\nbarrios_intersect_alta[\"geometry\"] = renabap_pba_intersect.geometry.intersection(peligro_alta_union)\nbarrios_intersect_alta = barrios_intersect_alta[~barrios_intersect_alta.geometry.is_empty]\nbarrios_area_peligro_alta_ha = float(round(barrios_intersect_alta.geometry.area.sum() / 10000, 1))\nbarrios_pct_peligro_alta = float(round((barrios_area_peligro_alta_ha / barrios_total_area_ha) * 100, 1))\n\n# Calcular el área de superposición real entre barrios y zonas de peligro medio\nbarrios_intersect_media = renabap_pba_intersect.copy()\nbarrios_intersect_media[\"geometry\"] = renabap_pba_intersect.geometry.intersection(peligro_media_union)\nbarrios_intersect_media = barrios_intersect_media[~barrios_intersect_media.geometry.is_empty]\nbarrios_area_peligro_media_ha = float(round(barrios_intersect_media.geometry.area.sum() / 10000, 1))\nbarrios_pct_peligro_media = float(round((barrios_area_peligro_media_ha / barrios_total_area_ha) * 100, 1))\n\n# Calcular el área total de barrios populares como porcentaje del partido\nbarrios_pct_del_partido = float(round((barrios_total_area_ha / la_plata_area_ha) * 100, 1))\n\n\n\n\n# Calcular área para cada tipo de peligro en hectáreas\npeligro_areas = (\n    peligro_la_plata.groupby(\"PELIGROSID\")[\"geometry\"]\n    .apply(\n        lambda x: x.area.sum() / 10000  # Convertir m² a hectáreas\n    )\n    .reset_index()\n)\npeligro_areas.columns = [\"tipo_peligro\", \"area_ha\"]\n\n# Calcular porcentajes\npeligro_areas[\"porcentaje\"] = (peligro_areas[\"area_ha\"] / la_plata_area_ha) * 100\n\n# Variables para cada nivel de peligro (convertir a float Python nativo)\npeligro_alta_ha = float(\n    round(peligro_areas[peligro_areas[\"tipo_peligro\"] == \"alta\"][\"area_ha\"].iloc[0], 1)\n)\npeligro_alta_pct = float(\n    round(\n        peligro_areas[peligro_areas[\"tipo_peligro\"] == \"alta\"][\"porcentaje\"].iloc[0], 1\n    )\n)\npeligro_media_ha = float(\n    round(peligro_areas[peligro_areas[\"tipo_peligro\"] == \"media\"][\"area_ha\"].iloc[0], 1)\n)\npeligro_media_pct = float(\n    round(\n        peligro_areas[peligro_areas[\"tipo_peligro\"] == \"media\"][\"porcentaje\"].iloc[0], 1\n    )\n)\n\n# Área total cubierta por zonas de peligro (convertir a float Python nativo)\narea_total_peligro_ha = float(round(peligro_areas[\"area_ha\"].sum(), 1))\nporcentaje_total_peligro = float(round(peligro_areas[\"porcentaje\"].sum(), 1))\n\n\nSegún los datos oficiales de RENABAP, hay un total de 33.888 familias y 30.753 edificios en 166 barrios populares en el Partido de La Plata. Sin embargo, estos datos fueron creados basándose en proyecciones del Censo Argentino de 2010 hacia 2023. Nuestro análisis de datos de huellas de edificios encuentra un total de 72.328 edificios en barrios populares en La Plata, representando aproximadamente 41.575 edificios adicionales que no están contabilizados en los datos oficiales.\nEl Partido de La Plata tiene un área total de 89.667.9 hectáreas, de las cuales 4.202.3 hectáreas (4.7%) corresponden a zonas de peligro alto y 19.515.0 hectáreas (21.8%) a zonas de peligro medio bajo el escenario de Precipitación Máxima Probable (PMP). En el Partido existen un total de 166 barrios populares que ocupan 1.760.9 hectáreas (2.0% del territorio total), y de estos, 153.5 hectáreas (8.7% del área total de barrios populares) se superponen con zonas de peligro alto, mientras que 310.1 hectáreas (17.6% del área total de barrios populares) se superponen con zonas de peligro medio. En total, 124 barrios (74.7% del total) intersectan con zonas de peligro, siendo 1 barrio que intersecta únicamente con zonas de peligro alto, 46 barrios que intersectan únicamente con zonas de peligro medio, y 77 barrios que presentan tanto peligro alto como medio dentro de sus límites.\n\nMostrar código\nfig1, ax1 = create_consistent_map(\n    \"Asentamientos RENABAP en La Plata\", crs=USE_CRS, boundary_gdf=la_plata, bounds=common_bounds, attribution=\"Datos: RENABAP (2023), IGN (2025) | Mapa base: Carto (2025)\", scalebar_length=0.20\n)\n\nrenabap_pba_intersect_3857 = renabap_pba_intersect.to_crs(WEB_MERCATOR_CRS)\n\nrenabap_pba_intersect_3857.plot(\n    ax=ax1, facecolor=\"none\", edgecolor=\"black\", linewidth=0.5, legend=False, zorder=10\n)\n\nplt.tight_layout()\nplt.show()\n\n\n\n# Reorder the categories so they map correctly to plasma colormap\npeligro_clipped_3857[\"PELIGROSID_ordered\"] = pd.Categorical(\n    peligro_clipped_3857[\"PELIGROSID\"],\n    categories=[\"media\", \"alta\"],\n    ordered=True,\n)\n\n\nfig2, ax2 = create_consistent_map(\n    \"Zonas de Peligro en La Plata\", crs=USE_CRS, boundary_gdf=la_plata, bounds=common_bounds, attribution=\"Datos: Romanazzi et al. (2019), IGN (2025) | Mapa base: Carto (2025)\", scalebar_length=0.20\n)\n\n\ncolor_map = peligro_clipped_3857[\"PELIGROSID\"].map(PELIGROSIDAD_COLORS)\n\npeligro_clipped_3857.plot(\n    ax=ax2,\n    color=color_map,\n    alpha=0.75,\n    zorder=5,\n)\n\nax2.legend(handles=PELIGROSIDAD_LEGEND, loc=\"lower right\")\n\nplt.tight_layout()\nplt.show()\n\n\nfig3, ax3 = create_consistent_map(\n    \"Huellas de edificios\", crs=USE_CRS, boundary_gdf=la_plata, bounds=common_bounds, attribution=\"Datos: VIDA (2023), IGN (2025) | Mapa base: Carto (2025)\", scalebar_length=0.20\n)\n\nbuildings_3857 = buildings_proj.to_crs(WEB_MERCATOR_CRS)\n\nbuildings_3857.plot(ax=ax3, facecolor=\"grey\", edgecolor=\"none\", alpha=0.7)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Asentamientos RENABAP en La Plata\n\n\n\n\n\n\n\n\n\n\n\n(b) Zonas de Peligro en La Plata\n\n\n\n\n\n\n\n\n\n\n\n(c) Huellas de edificios\n\n\n\n\n\n\n\nFigure 3.1: Fuentes de datos para análisis de exposición",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  },
  {
    "objectID": "renabap.html#metodología",
    "href": "renabap.html#metodología",
    "title": "3  RENABAP",
    "section": "3.5 Metodología",
    "text": "3.5 Metodología\nEn versiones anteriores de este análisis, el trabajo se realizó mediante una interpolación areal simple del porcentaje de superposición de cada área de peligro de inundación con los asentamientos informales. Este enfoque presenta dos problemas fundamentales que este estudio busca abordar.\nEl primer problema es que la interpolación areal es inherentemente imprecisa, ya que asume lo que se conoce como el problema de la unidad areal modificable y presupone que la población se distribuye uniformemente en el espacio. Estudios confirman que cuando se asume distribución uniforme de población en áreas extensas (como datos de censo a nivel de sección), las estimaciones de exposición a inundaciones son inexactas, requiriendo datos de mayor resolución que no asuman distribución uniforme (Smith et al. 2019). La población, de hecho, no se distribuye uniformemente en el espacio; frecuentemente los edificios se agrupan ya sea alejándose de las zonas de peligro de inundación o concentrándose en zonas de alto peligro de inundación. Por tanto, es fundamental comprender con estimaciones más precisas dónde vive realmente la gente.\nEl segundo problema radica en que los propios datos del RENABAP, según nuestro análisis aquí presentado, parecen contar dramáticamente de forma incorrecta, frecuentemente por un factor de dos o más, el número de familias que aparentemente viven en un asentamiento informal basándose en el número de edificios. Esto probablemente se debe a errores de proyección acumulados a lo largo del tiempo y a la dificultad de mantener actualizados los datos de asentamientos informales.\nEsta es una de las grandes ventajas de las huellas de edificios globales derivadas de satélite que han surgido en los últimos años de Google-Microsoft-OSM, entre otros. Uno de los objetivos principales de este análisis es demostrar que estos datos de huellas de edificios pueden utilizarse para estimar la exposición de manera más precisa, tanto en términos de precisión metodológica como en términos de mejora sobre conjuntos de datos nacionales existentes como el RENABAP.\nPor tanto, en este estudio utilizamos el número de edificios que intersectan con las diferentes zonas de peligro de inundación como medida de exposición, utilizando específicamente los datos de peligrosidad generados para el escenario de Precipitación Máxima Probable (PMP). Aunque los datos del RENABAP estiman aproximadamente 1,1 familias por edificio, medimos la exposición en términos del número comparativo de edificios, lo cual es suficiente para demostrar las limitaciones del RENABAP y proporcionar estimaciones razonablemente buenas de exposición.\nBasándonos en conversaciones con planificadores académicos y municipales, asumimos que la mayoría de edificios en asentamientos informales son residenciales de uno a dos pisos, creando una correspondencia estrecha entre número de edificios y familias. Esta suposición es válida para este contexto específico, aunque no aplicaría a asentamientos formales densos.\n\n\nMostrar código\n# Definir orden de prioridad de peligro y simplificar\nhazard_priority = {\"alta\": 2, \"media\": 1}\npeligro_simple = peligro_la_plata.dissolve(by=\"PELIGROSID\").reset_index()\n\n# Construir índices espaciales para operaciones más rápidas\nbuildings_proj.sindex\nrenabap_pba_intersect.sindex\npeligro_simple.sindex\n\n# Filtrar edificios a solo aquellos que podrían intersectar con barrios\n# usando intersección de cajas delimitadoras primero (mucho más rápido que intersección geométrica)\n# Crear una unión de todas las cajas delimitadoras individuales de barrios\n\n\n# Obtener cajas delimitadoras individuales para cada barrio\nbarrio_boxes = []\nfor _, barrio in renabap_pba_intersect.iterrows():\n    bounds = barrio.geometry.bounds\n    barrio_boxes.append(box(bounds[0], bounds[1], bounds[2], bounds[3]))\n\n# Crear una unión de todas las cajas delimitadoras de barrios\n\n\nbarrios_union = unary_union(barrio_boxes)\n\n# Filtrar edificios a solo aquellos que intersectan con cualquier caja delimitadora de barrio\nbuildings_candidates = buildings_proj[buildings_proj.geometry.intersects(barrios_union)]\n\n# Ahora hacer el join espacial en el dataset filtrado mucho más pequeño\nbuildings_with_barrios = gpd.sjoin(\n    buildings_candidates,\n    renabap_pba_intersect[\n        [\"id_renabap\", \"nombre_barrio\", \"familias_aproximadas\", \"geometry\"]\n    ],\n    how=\"inner\",\n    predicate=\"within\",\n)\n\nbuildings_with_barrios = buildings_with_barrios.drop(columns=[\"index_right\"]).copy()\n\n# Etapa 1: Obtener edificios que están claramente dentro de zonas de peligro (rápido)\nbuildings_within_hazards = gpd.sjoin(\n    buildings_with_barrios,\n    peligro_simple[[\"PELIGROSID\", \"geometry\"]],\n    how=\"inner\",\n    predicate=\"within\",\n)\n\n# Etapa 2: Encontrar edificios que están cerca de los límites de peligro pero no dentro\n# Usar un pequeño buffer alrededor de las zonas de peligro para encontrar casos límite potenciales\nhazard_buffered = peligro_simple.copy()\nhazard_buffered[\"geometry\"] = peligro_simple.geometry.buffer(5)  # buffer de 5 metros\n\nbuildings_near_hazards = gpd.sjoin(\n    buildings_with_barrios,\n    hazard_buffered[[\"PELIGROSID\", \"geometry\"]],\n    how=\"inner\",\n    predicate=\"within\",\n)\n\n# Encontrar casos límite (cerca de peligros pero no dentro de los peligros originales)\nwithin_ids = set(buildings_within_hazards.index)\nnear_ids = set(buildings_near_hazards.index)\nedge_case_ids = near_ids - within_ids\n\nbuildings_edge_cases = buildings_with_barrios.loc[list(edge_case_ids)]\n\n# Etapa 3: Usar intersects solo en los casos límite\nbuildings_edge_cases_with_hazard = gpd.sjoin(\n    buildings_edge_cases,\n    peligro_simple[[\"PELIGROSID\", \"geometry\"]],\n    how=\"left\",\n    predicate=\"intersects\",\n)\n\n# Combinar resultados\nbuildings_with_peligro_barrio = pd.concat(\n    [buildings_within_hazards, buildings_edge_cases_with_hazard], ignore_index=True\n)\n\n\n# Resolver duplicados y contar\nbuildings_barrio_final = buildings_with_peligro_barrio.dropna(\n    subset=[\"PELIGROSID\"]\n).copy()\nbuildings_barrio_final.loc[:, \"prioridad\"] = buildings_barrio_final[\"PELIGROSID\"].map(\n    hazard_priority\n)\nbuildings_barrio_unique = buildings_barrio_final.sort_values(\n    \"prioridad\", ascending=False\n).drop_duplicates(subset=buildings_barrio_final.geometry.name, keep=\"first\")\n\n# Calcular exposición por barrio\nedificios_por_barrio_peligro = (\n    buildings_barrio_unique.groupby([\"id_renabap\", \"PELIGROSID\"])\n    .size()\n    .reset_index(name=\"edificios_expuestos\")\n)\n\ntotal_edificios_barrio = (\n    buildings_with_barrios.groupby(\"id_renabap\")\n    .size()\n    .reset_index(name=\"total_edificios\")\n)\n\nexposure_barrio = edificios_por_barrio_peligro.merge(\n    total_edificios_barrio, on=\"id_renabap\"\n)\nexposure_barrio[\"proporcion\"] = (\n    exposure_barrio[\"edificios_expuestos\"] / exposure_barrio[\"total_edificios\"]\n)\n\nfamilias_barrio = renabap_pba_intersect[\n    [\"id_renabap\", \"nombre_barrio\", \"familias_aproximadas\"]\n].drop_duplicates()\nfinal_exposure_barrio = exposure_barrio.merge(familias_barrio, on=\"id_renabap\")\nfinal_exposure_barrio[\"fam_expuestas\"] = (\n    final_exposure_barrio[\"proporcion\"] * final_exposure_barrio[\"familias_aproximadas\"]\n)\n\nresultado_exposicion_barrio = final_exposure_barrio[\n    [\n        \"id_renabap\",\n        \"nombre_barrio\",\n        \"PELIGROSID\",\n        \"edificios_expuestos\",\n    ]\n].rename(columns={\"PELIGROSID\": \"peligrosidad\"})\n\n# === ANÁLISIS POR CUENCA ===\n# Usar edificios ya en barrios para análisis de cuenca\nbuildings_in_settlements = buildings_with_barrios.copy()\n\n# Spatial joins para cuenca\nbuildings_with_cuenca = gpd.sjoin(\n    buildings_in_settlements,\n    cuencas[[\"Cuenca\", \"eje\", \"geometry\"]],\n    how=\"left\",\n    predicate=\"within\",\n)\nbuildings_with_cuenca = buildings_with_cuenca.drop(columns=[\"index_right\"]).copy()\n\nbuildings_with_peligro_cuenca = gpd.sjoin(\n    buildings_in_settlements,\n    peligro_simple[[\"PELIGROSID\", \"geometry\"]],\n    how=\"left\",\n    predicate=\"within\",\n)\n\n# Combinar y filtrar\nbuildings_cuenca_final = buildings_in_settlements.copy()\nbuildings_cuenca_final.loc[:, \"Cuenca\"] = buildings_with_cuenca[\"Cuenca\"]\nbuildings_cuenca_final.loc[:, \"eje\"] = buildings_with_cuenca[\"eje\"]\nbuildings_cuenca_final.loc[:, \"PELIGROSID\"] = buildings_with_peligro_cuenca[\n    \"PELIGROSID\"\n]\nbuildings_cuenca_final = buildings_cuenca_final.dropna(\n    subset=[\"Cuenca\", \"PELIGROSID\"]\n).copy()\n\n# Resolver duplicados y calcular exposición por cuenca\nbuildings_cuenca_final.loc[:, \"prioridad\"] = buildings_cuenca_final[\"PELIGROSID\"].map(\n    hazard_priority\n)\nbuildings_cuenca_unique = buildings_cuenca_final.sort_values(\n    \"prioridad\", ascending=False\n).drop_duplicates(subset=buildings_cuenca_final.geometry.name, keep=\"first\")\n\nedificios_por_cuenca_peligro = (\n    buildings_cuenca_unique.groupby([\"Cuenca\", \"PELIGROSID\"])\n    .size()\n    .reset_index(name=\"edificios_expuestos\")\n)\n\ntotal_edificios_cuenca = (\n    buildings_with_cuenca.dropna(subset=[\"Cuenca\"])\n    .groupby(\"Cuenca\")\n    .size()\n    .reset_index(name=\"total_edificios\")\n)\n\nexposure_cuenca = edificios_por_cuenca_peligro.merge(\n    total_edificios_cuenca, on=\"Cuenca\"\n)\nexposure_cuenca[\"proporcion\"] = (\n    exposure_cuenca[\"edificios_expuestos\"] / exposure_cuenca[\"total_edificios\"]\n)\n\nfamilias_cuenca = (\n    settle_hazard_cuencas.drop_duplicates(\"id_renabap\")\n    .groupby(\"Cuenca\")[\"familias_aproximadas\"]\n    .sum()\n    .reset_index()\n)\n\nfinal_exposure_cuenca = exposure_cuenca.merge(familias_cuenca, on=\"Cuenca\")\nfinal_exposure_cuenca[\"fam_expuestas\"] = (\n    final_exposure_cuenca[\"proporcion\"] * final_exposure_cuenca[\"familias_aproximadas\"]\n)\n\nresultado_exposicion_cuenca = final_exposure_cuenca[\n    [\"Cuenca\", \"PELIGROSID\", \"edificios_expuestos\"]\n].rename(columns={\"PELIGROSID\": \"peligrosidad\"})\n\n# === ANÁLISIS POR EJE ===\n# Usar los edificios ya procesados con cuenca y peligro\nbuildings_eje_final = buildings_cuenca_final.dropna(subset=[\"eje\"]).copy()\n\n# Resolver duplicados por prioridad de peligro\nbuildings_eje_final.loc[:, \"prioridad\"] = buildings_eje_final[\"PELIGROSID\"].map(\n    hazard_priority\n)\nbuildings_eje_unique = buildings_eje_final.sort_values(\n    \"prioridad\", ascending=False\n).drop_duplicates(subset=buildings_eje_final.geometry.name, keep=\"first\")\n\n# Calcular exposición por eje y peligrosidad\nedificios_por_eje_peligro = (\n    buildings_eje_unique.groupby([\"eje\", \"PELIGROSID\"])\n    .size()\n    .reset_index(name=\"edificios_expuestos\")\n)\n\ntotal_edificios_eje = (\n    buildings_with_cuenca.dropna(subset=[\"eje\"])\n    .groupby(\"eje\")\n    .size()\n    .reset_index(name=\"total_edificios\")\n)\n\nexposure_eje = edificios_por_eje_peligro.merge(total_edificios_eje, on=\"eje\")\nexposure_eje[\"proporcion\"] = (\n    exposure_eje[\"edificios_expuestos\"] / exposure_eje[\"total_edificios\"]\n)\n\nfamilias_por_eje = (\n    settle_hazard_cuencas.drop_duplicates(\"id_renabap\")\n    .groupby(\"eje\")[\"familias_aproximadas\"]\n    .sum()\n    .reset_index()\n)\n\nfinal_exposure_eje = exposure_eje.merge(familias_por_eje, on=\"eje\")\nfinal_exposure_eje[\"fam_expuestas\"] = (\n    final_exposure_eje[\"proporcion\"] * final_exposure_eje[\"familias_aproximadas\"]\n)\n\nresultado_exposicion_eje = final_exposure_eje[\n    [\"eje\", \"PELIGROSID\", \"edificios_expuestos\"]\n].rename(columns={\"PELIGROSID\": \"peligrosidad\"})\n\n\n\n3.5.1 Limitaciones de los datos del RENABAP\nLos datos del RENABAP presentan limitaciones importantes que justifican el uso de huellas de edificios como alternativa más precisa. Los datos más recientes del RENABAP de 2023 subestiman significativamente el número total de familias por asentamiento informal. Estos datos se basan en proyecciones derivadas del censo de 2010, lo que ha resultado en estimaciones considerablemente desactualizadas.\n\n\nMostrar código\n# =============================================================================\n# ANALYTICAL PROCESSING: RENABAP DATA VALIDATION\n# =============================================================================\n\n# Calcular familias estimadas basadas en edificios (1,1 familias por edificio)\nratio_fam_edif = (\n    buildings_with_barrios.groupby([\"id_renabap\", \"familias_aproximadas\"])\n    .size()\n    .reset_index(name=\"total_edificios\")\n)\n\nratio_fam_edif[\"familias_estimadas_edificios\"] = ratio_fam_edif[\"total_edificios\"] * 1.1\n# Calcular el error porcentual: (RENABAP - Edificios) / Edificios * 100\nratio_fam_edif[\"error_porcentual\"] = (\n    (\n        ratio_fam_edif[\"familias_aproximadas\"]\n        - ratio_fam_edif[\"familias_estimadas_edificios\"]\n    )\n    / ratio_fam_edif[\"familias_estimadas_edificios\"]\n) * 100\n\n# =============================================================================\n# GRAPHICS: RENABAP ERROR ANALYSIS\n# =============================================================================\n\n# Crear histograma\nplt.figure(figsize=(12, 6))\nplt.hist(\n    ratio_fam_edif[\"error_porcentual\"],\n    bins=30,\n    edgecolor=\"none\",\n    color=PELIGROSIDAD_COLORS[\"media\"],\n)\n\n# Personalizar el gráfico\nplt.title(\n    \"Error de Estimación de RENABAP vs Estimación por Edificios\",\n    fontsize=16,\n    fontweight=\"bold\",\n)\nplt.xlabel(\"Error Porcentual (%)\", fontsize=12)\nplt.ylabel(\"Frecuencia (Número de Barrios)\", fontsize=12)\n\n# Agregar líneas de referencia\nmean_error = ratio_fam_edif[\"error_porcentual\"].mean()\nmedian_error = ratio_fam_edif[\"error_porcentual\"].median()\n\n# Rango de personas no contabilizadas (3-5 personas por vivienda)\npersonas_min_faltantes = round(viviendas_faltantes * 3, -3)  # Round to nearest thousand\npersonas_max_faltantes = round(viviendas_faltantes * 5, -3)  # Round to nearest thousand\n\nplt.axvline(\n    mean_error,\n    color=\"black\",\n    linestyle=\"--\",\n    linewidth=2,\n    label=f\"Error promedio: {mean_error:.1f}%\",\n)\nplt.axvline(\n    median_error,\n    color=\"black\",\n    linestyle=\"dotted\",\n    linewidth=2,\n    label=f\"Error mediano: {median_error:.1f}%\",\n)\n\n\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3.2: Distribución del error porcentual en las estimaciones del RENABAP comparado con estimaciones basadas en edificios\n\n\n\n\n\nNuestro análisis comparativo entre los datos del RENABAP y el conteo de huellas de edificios revela que el RENABAP subestima el número de estructuras habitacionales en un promedio del 41%. A nivel agregado, esto se traduce en aproximadamente 41.575 viviendas faltantes que no están contabilizadas en las estadísticas oficiales del RENABAP. Considerando un rango razonable de 3 a 5 personas por vivienda, esta subestimación representa entre 125.000 y 208.000 personas que podrían estar no contabilizadas en los asentamientos informales. Esta discrepancia masiva demuestra claramente las limitaciones críticas del RENABAP para la evaluación precisa de la exposición a riesgos de inundación y la planificación de políticas públicas.\nTambién podemos examinar imágenes satelitales de un asentamiento informal de muestra con las huellas de edificios superpuestas para tener una idea de la veracidad de los datos. Aquí está un barrio llamado Los Pinos, en el cual mapeamos la extensión del RENABAP del barrio y las huellas de los edificios dentro de él. Las estimaciones del RENABAP dicen que este asentamiento informal tiene solo 72 familias. Nuestros datos cuentan 519 edificios. Si usamos la estimación del RENABAP de aproximadamente 1,1 familias por edificio, que es lo que calculan en sus datos originales, estamos hablando de un total de 570 familias, que es casi ocho veces más de lo que los datos del RENABAP contabilizan.\n\n\nMostrar código\n# Filtrar para obtener solo el barrio con id_renabap 5688\nbarrio_5688 = renabap_pba_intersect[renabap_pba_intersect[\"id_renabap\"] == 5688].copy()\nif len(barrio_5688) == 0:\n    print(\"No se encontró el barrio con id_renabap 5688\")\nelse:\n    # Obtener edificios en este barrio\n    buildings_5688 = buildings_with_barrios[\n        buildings_with_barrios[\"id_renabap\"] == 5688\n    ].copy()\n    # Convertir a Web Mercator\n    barrio_5688_3857 = barrio_5688.to_crs(WEB_MERCATOR_CRS)\n    buildings_5688_3857 = buildings_5688.to_crs(WEB_MERCATOR_CRS)\n    # Crear el mapa\n    fig, ax = plt.subplots(figsize=DEFAULT_FIGSIZE)\n    # Configurar límites basados en el barrio\n    bounds = barrio_5688_3857.total_bounds\n    margin = 50  # metros\n    ax.set_xlim(bounds[0] - margin, bounds[2] + margin)\n    ax.set_ylim(bounds[1] - margin, bounds[3] + margin)\n    # Agregar basemap de contextily\n    cx.add_basemap(ax, crs=WEB_MERCATOR_CRS, source=cx.providers.Esri.WorldImagery, attribution=\"Datos: RENABAP (2023), VIDA (2023) | Mapa base: Esri (2025), Carto (2025)\")\n    # Plot de edificios con contorno naranja (sin fill)\n    buildings_5688_3857.plot(\n        ax=ax, facecolor=\"none\", edgecolor=PELIGROSIDAD_COLORS[\"media\"], linewidth=1\n    )\n    # Plot del límite del barrio con estilo consistente\n    barrio_5688_3857.plot(\n        ax=ax,\n        facecolor=\"none\",\n        edgecolor=\"white\",  # White for satellite imagery visibility\n        linewidth=3,\n        linestyle=\"--\",\n        zorder=10,\n    )\n\n    cx.add_basemap(ax, crs=WEB_MERCATOR_CRS, source=cx.providers.CartoDB.PositronOnlyLabels, attribution=\"\")\n\n\n    scale_bar(\n        ax=ax,\n        location=\"upper left\",\n        style=\"ticks\",\n        bar={\n            \"projection\": \"axis\",\n            \"minor_type\": \"none\",\n            \"tickcolors\": \"white\",\n            \"basecolors\": \"white\",\n            \"max\": 100,\n        },\n        labels={\"style\": \"first_last\", \"textcolors\": [\"white\"], \"stroke_width\": 0},\n        units={\"label\": \"m\", \"textcolor\": \"white\", \"stroke_width\": 0},\n    )\n\n    north_arrow(\n        ax,\n        location=\"upper right\",\n        scale=0.3,  # Small size\n        rotation={\"degrees\": 0},\n        base={\"facecolor\": \"none\", \"edgecolor\": \"white\", \"linewidth\": 1},\n        fancy=True,\n        shadow=True,\n        label=False,  # Hide the \"N\" text\n    )\n\n    # Limpiar el mapa\n    barrio_nombre = barrio_5688[\"nombre_barrio\"].iloc[0]\n    familias_renabap = int(barrio_5688[\"familias_aproximadas\"].iloc[0])\n    total_edificios = len(buildings_5688)\n\n    # Título principal usando suptitle\n    fig.suptitle(\n        f\"Barrio {barrio_nombre} - Límites y edificios\",\n        fontsize=16,\n        fontweight=\"bold\",\n        y=0.98,\n    )\n\n    # Subtítulo usando title\n    ax.set_title(\n        f\"RENABAP: {familias_renabap} familias | Edificios detectados: {total_edificios}\",\n        fontsize=12,\n        style=\"italic\",\n        pad=30,\n    )\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel(\"\")\n    ax.set_ylabel(\"\")\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"bottom\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n    # Agregar leyenda simple\n    legend_elements = [\n        plt.Line2D([0], [0], color=\"white\", linewidth=3, label=\"Límite del barrio\"),\n        plt.Line2D(\n            [0],\n            [0],\n            color=PELIGROSIDAD_COLORS[\"media\"],\n            linewidth=1,\n            label=\"edificios\",\n        ),\n    ]\n    ax.legend(handles=legend_elements, loc=\"lower right\", bbox_to_anchor=(1.0, 0.02))\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\nFigure 3.3: Ejemplo de discrepancia en los datos del RENABAP: el barrio Los Pinos con límites oficiales y edificios detectadas\n\n\n\n\n\nAl examinar otros ejemplos de barrios con las mayores discrepancias entre las huellas de edificios detectadas y los datos oficiales del RENABAP, observamos que frecuentemente encontramos órdenes de magnitud más edificios que familias estimadas, representando miles de familias no contabilizadas.\n\nMostrar código\n# IDs de los barrios a visualizar\nbarrio_ids = [4577, 65, 6541, 17]\n\nfor i, barrio_id in enumerate(barrio_ids):\n    # Filtrar para obtener el barrio específico\n    barrio_data = renabap_pba_intersect[\n        renabap_pba_intersect[\"id_renabap\"] == barrio_id\n    ].copy()\n\n    if len(barrio_data) == 0:\n        print(f\"No se encontró el barrio con id_renabap {barrio_id}\")\n        continue\n\n    # Obtener edificios en este barrio\n    buildings_data = buildings_with_barrios[\n        buildings_with_barrios[\"id_renabap\"] == barrio_id\n    ].copy()\n\n    # Convertir a Web Mercator\n    barrio_3857 = barrio_data.to_crs(WEB_MERCATOR_CRS)\n    buildings_3857 = buildings_data.to_crs(WEB_MERCATOR_CRS)\n\n    # Crear el mapa individual\n    fig, ax = plt.subplots(figsize=DEFAULT_FIGSIZE)\n\n    # Configurar límites basados en el barrio\n    bounds = barrio_3857.total_bounds\n    margin = 50  # metros\n    ax.set_xlim(bounds[0] - margin, bounds[2] + margin)\n    ax.set_ylim(bounds[1] - margin, bounds[3] + margin)\n\n    # Agregar basemap de contextily\n    cx.add_basemap(\n        ax, crs=WEB_MERCATOR_CRS, source=cx.providers.Esri.WorldImagery, attribution=\"Datos: RENABAP (2023), VIDA (2023) | Mapa base: Esri (2025)\"\n    )\n\n    # Plot de edificios con contorno naranja (sin fill)\n    buildings_3857.plot(\n        ax=ax, facecolor=\"none\", edgecolor=PELIGROSIDAD_COLORS[\"media\"], linewidth=1\n    )\n\n    # Plot del límite del barrio con estilo consistente\n    barrio_3857.plot(\n        ax=ax,\n        facecolor=\"none\",\n        edgecolor=\"white\",\n        linewidth=3,\n        linestyle=\"--\",\n        zorder=10,\n    )\n\n\n    cx.add_basemap(ax, crs=WEB_MERCATOR_CRS, source=cx.providers.CartoDB.PositronOnlyLabels, attribution=\"\")\n\n    scale_bar(\n        ax=ax,\n        location=\"upper left\",\n        style=\"ticks\",\n        bar={\n            \"projection\": \"axis\",\n            \"minor_type\": \"none\",\n            \"tickcolors\": \"white\",\n            \"basecolors\": \"white\",\n            \"max\": 200,\n        },\n        labels={\"style\": \"first_last\", \"textcolors\": [\"white\"], \"stroke_width\": 0},\n        units={\"label\": \"m\", \"textcolor\": \"white\", \"stroke_width\": 0},\n    )\n\n    # Agregar flecha del norte\n    north_arrow(\n        ax,\n        location=\"upper right\",\n        scale=0.3,\n        rotation={\"degrees\": 0},\n        base={\"facecolor\": \"none\", \"edgecolor\": \"white\", \"linewidth\": 1},\n        fancy=True,\n        shadow=True,\n        label=False,\n    )\n\n    # Obtener información del barrio\n    barrio_nombre = barrio_data[\"nombre_barrio\"].iloc[0]\n    familias_renabap = int(barrio_data[\"familias_aproximadas\"].iloc[0])\n    total_edificios = len(buildings_data)\n\n    # Título principal usando suptitle\n    fig.suptitle(f\"Barrio {barrio_nombre}\", fontsize=16, fontweight=\"bold\", y=0.98)\n\n    # Subtítulo usando title\n    ax.set_title(\n        f\"RENABAP: {familias_renabap} familias | Edificios detectados: {total_edificios}\",\n        fontsize=12,\n        style=\"italic\",\n        pad=30,\n    )\n\n    # Limpiar el mapa\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel(\"\")\n    ax.set_ylabel(\"\")\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"bottom\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n\n    plt.tight_layout()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\n\n\n\n\n(d)\n\n\n\n\n\n\n\nFigure 3.4",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  },
  {
    "objectID": "renabap.html#procesamiento-y-resultados",
    "href": "renabap.html#procesamiento-y-resultados",
    "title": "3  RENABAP",
    "section": "3.6 Procesamiento y resultados",
    "text": "3.6 Procesamiento y resultados\n\n\nMostrar código\n# =============================================================================\n# EXPOSICIÓN POR BARRIO\n# =============================================================================\n# Preparar datos - solo alta y media\nexposure_data = resultado_exposicion_barrio[\n    resultado_exposicion_barrio[\"peligrosidad\"].isin([\"alta\", \"media\"])\n].copy()\n\n# Merge con geometrías para obtener centroides\nexposure_gdf = exposure_data.merge(\n    renabap_pba_intersect[[\"id_renabap\", \"geometry\"]], on=\"id_renabap\"\n)\nexposure_gdf = gpd.GeoDataFrame(exposure_gdf, geometry=\"geometry\", crs=USE_CRS)\n\n# Convertir a Web Mercator para el plotting\nexposure_gdf_3857 = exposure_gdf.to_crs(WEB_MERCATOR_CRS)\nla_plata_3857 = la_plata.to_crs(WEB_MERCATOR_CRS)\n\n\n# Filtrar exposición alta y media por nombre de barrio (excluyendo \"Sin Nombre\")\nbarrios_alta_data = (\n    resultado_exposicion_barrio[\n        (resultado_exposicion_barrio[\"peligrosidad\"] == \"alta\")\n        & (resultado_exposicion_barrio[\"nombre_barrio\"] != \"Sin Nombre\")\n    ]\n    .groupby(\"nombre_barrio\")[\"edificios_expuestos\"]\n    .sum()\n    .reset_index()\n    .sort_values(\"edificios_expuestos\", ascending=False)\n    .head(10)\n)\n\nbarrios_media_data = (\n    resultado_exposicion_barrio[\n        (resultado_exposicion_barrio[\"peligrosidad\"] == \"media\")\n        & (resultado_exposicion_barrio[\"nombre_barrio\"] != \"Sin Nombre\")\n    ]\n    .groupby(\"nombre_barrio\")[\"edificios_expuestos\"]\n    .sum()\n    .reset_index()\n)\n\n# Merge para tener ambos niveles\nbarrios_combined = barrios_alta_data.merge(\n    barrios_media_data, on=\"nombre_barrio\", how=\"left\", suffixes=(\"_alta\", \"_media\")\n)\nbarrios_combined[\"edificios_expuestos_media\"] = barrios_combined[\n    \"edificios_expuestos_media\"\n].fillna(0)\n\n# =============================================================================\n# EXPOSICIÓN POR CUENCA Y EJE\n# =============================================================================\n\ncuenca_alta_data = (\n    resultado_exposicion_cuenca[resultado_exposicion_cuenca[\"peligrosidad\"] == \"alta\"]\n    .groupby(\"Cuenca\")[\"edificios_expuestos\"]\n    .sum()\n    .reset_index()\n    .sort_values(\"edificios_expuestos\", ascending=False)\n)\n\ncuenca_media_data = (\n    resultado_exposicion_cuenca[resultado_exposicion_cuenca[\"peligrosidad\"] == \"media\"]\n    .groupby(\"Cuenca\")[\"edificios_expuestos\"]\n    .sum()\n    .reset_index()\n)\n\n# Merge para tener ambos niveles\ncuenca_combined = cuenca_alta_data.merge(\n    cuenca_media_data, on=\"Cuenca\", how=\"left\", suffixes=(\"_alta\", \"_media\")\n)\ncuenca_combined[\"edificios_expuestos_media\"] = cuenca_combined[\n    \"edificios_expuestos_media\"\n].fillna(0)\n\n# === GRÁFICO DE EJES ===\n# Filtrar exposición alta y media por eje\neje_alta_data = (\n    resultado_exposicion_eje[resultado_exposicion_eje[\"peligrosidad\"] == \"alta\"]\n    .groupby(\"eje\")[\"edificios_expuestos\"]\n    .sum()\n    .reset_index()\n    .sort_values(\"edificios_expuestos\", ascending=False)\n)\n\neje_media_data = (\n    resultado_exposicion_eje[resultado_exposicion_eje[\"peligrosidad\"] == \"media\"]\n    .groupby(\"eje\")[\"edificios_expuestos\"]\n    .sum()\n    .reset_index()\n)\n\n# Merge para tener ambos niveles\neje_combined = eje_alta_data.merge(\n    eje_media_data, on=\"eje\", how=\"left\", suffixes=(\"_alta\", \"_media\")\n)\neje_combined[\"edificios_expuestos_media\"] = eje_combined[\n    \"edificios_expuestos_media\"\n].fillna(0)\n\n# =============================================================================\n# CALCULAR ESTADÍSTICAS RESUMEN PARA EL TEXTO\n# =============================================================================\n\n# Totales de edificios expuestos (sin duplicados)\n# Los edificios que intersectan con ambos peligros ya están resueltos por prioridad en buildings_barrio_unique\ntotal_buildings_high_hazard = int(buildings_barrio_unique[buildings_barrio_unique[\"PELIGROSID\"] == \"alta\"].shape[0])\ntotal_buildings_medium_hazard = int(buildings_barrio_unique[buildings_barrio_unique[\"PELIGROSID\"] == \"media\"].shape[0])\ntotal_buildings_exposed = total_buildings_high_hazard + total_buildings_medium_hazard\n\n# Total de edificios en barrios\ntotal_buildings_in_barrios = len(buildings_with_barrios)\npercentage_exposed = float(round((total_buildings_exposed / total_buildings_in_barrios) * 100, 1))\n\n# Top 5 barrios por exposición a peligro alto\ntop_5_barrios_alta = (\n    resultado_exposicion_barrio[\n        (resultado_exposicion_barrio[\"peligrosidad\"] == \"alta\") & \n        (resultado_exposicion_barrio[\"nombre_barrio\"] != \"Sin Nombre\")\n    ]\n    .groupby(\"nombre_barrio\")[\"edificios_expuestos\"]\n    .sum()\n    .reset_index()\n    .sort_values(\"edificios_expuestos\", ascending=False)\n    .head(5)\n    .merge(\n        buildings_with_barrios.groupby(\"nombre_barrio\").size().reset_index(name=\"total_edificios_barrio\"),\n        on=\"nombre_barrio\"\n    )\n    .assign(porcentaje=lambda x: (x[\"edificios_expuestos\"] / x[\"total_edificios_barrio\"] * 100).round(1).astype(float))\n)\n\n# Top 5 cuencas con desglose por peligrosidad usando pivot\ntop_5_cuencas = (\n    resultado_exposicion_cuenca\n    .pivot_table(\n        index=\"Cuenca\", \n        columns=\"peligrosidad\", \n        values=\"edificios_expuestos\", \n        aggfunc=\"sum\", \n        fill_value=0\n    )\n    .reset_index()\n    .assign(edificios_expuestos_total=lambda x: x[\"alta\"] + x[\"media\"])\n    .rename(columns={\"alta\": \"edificios_expuestos_alta\", \"media\": \"edificios_expuestos_media\"})\n    .merge(\n        total_edificios_cuenca, \n        on=\"Cuenca\"\n    )\n    .sort_values(\"edificios_expuestos_total\", ascending=False)\n    .head(5)\n)\n\n\nEn los barrios populares de La Plata se identifican 17.014 edificios expuestas a peligros de inundación bajo el escenario de Precipitación Máxima Probable (PMP), lo que representa el 23.9% del total de edificios en asentamientos informales. De estas, 6.112 edificios se encuentran en zonas de peligro alto (35.9%) y 10.902 en zonas de peligro medio (64.1%).\nLa exposición se concentra principalmente en los alrededores del casco urbano de La Plata, con una distribución característica donde pocos barrios presentan exposición muy alta, seguidos por un grupo de exposición media. Villa Montoro lidera con 669 edificios expuestas a peligro alto (21.7% del barrio), seguido por La Esperanza con 440 edificios (16.3%), Las Palmeras con 417 (33.7%), Toba con 335 (67.7%), y La Isla con 320 edificios (96.4%).\nA nivel de cuencas hidrográficas, Cuenca Arroyo del Gato concentra la mayor exposición con 7.943 edificios expuestas (23.0% del total de edificios en asentamientos informales de la cuenca; 2.662 a peligro alto y 5.281 a peligro medio), principalmente debido a la presencia de Villa Montoro y otros asentamientos importantes. Le sigue Cuenca A° Maldonado con 3.316 edificios (18.9% del total; 1.000 alta, 2.316 media) y Cuenca Arroyo Martín-Carnaval con 1.096 edificios (49.1% del total; 368 alta, 728 media).\n\n3.6.1 Comparación metodológica\nUna comparación entre el enfoque tradicional de interpolación areal (basado en datos RENABAP) y nuestro análisis a nivel de edificio revela diferencias significativas en las estimaciones de exposición. Utilizando interpolación areal, donde se asume que las familias se distribuyen uniformemente en los asentamientos informales, se estima que 8.913 familias estarían expuestas a peligros de inundación (26.3% del total de familias según RENABAP), con 2.948 familias en zonas de peligro alto y 5.964 en zonas de peligro medio.\nEn contraste, nuestro análisis a nivel de edificio identifica 18.715 familias expuestas (23.5% del total de familias según nuestro análisis), representando 6.723 familias en peligro alto y 11.992 en peligro medio. Esta diferencia se debe principalmente a la identificación de aproximadamente el doble de edificios en asentamientos informales de lo que sugieren los datos oficiales del RENABAP.\nSin embargo, cuando se analiza la proporción de exposición relativa, nuestro análisis a nivel de edificio muestra una exposición proporcional menor (23.9% vs 26.3%), lo que demuestra que la interpolación areal sobrestima la exposición relativa al asumir una distribución uniforme de la población. Nuestro enfoque basado en edificios individuales retorna un mayor número total de población expuesta debido a la identificación de aproximadamente el doble de edificios que los datos oficiales del RENABAP, pero una menor proporción de exposición relativa debido a que no asume que la población se distribuye uniformemente en el espacio, sino que refleja la distribución real de los edificios.\n\n\n3.6.2 Exposición por barrio\n\n\nMostrar código\n# Crear el mapa\nfig, ax = plt.subplots(figsize=DEFAULT_FIGSIZE)\n\n# Configurar límites\nbounds = la_plata_3857.total_bounds\nmargin = 2000  # metros\nax.set_xlim(bounds[0] - margin, bounds[2] + margin)\nax.set_ylim(bounds[1] - margin, bounds[3] + margin)\n\n# Agregar basemap de contextily\ncx.add_basemap(\n    ax, crs=WEB_MERCATOR_CRS, source=cx.providers.CartoDB.PositronNoLabels, alpha=0.7, attribution=\"Datos: RENABAP (2023), VIDA (2023) | Mapa base: Carto (2025)\"\n)\n\n# Plot de puntos con jitter\nnp.random.seed(42)\nplotting_order = [\"media\", \"alta\"]\n\nfor peligrosidad in plotting_order:\n    level_data = exposure_gdf_3857[exposure_gdf_3857[\"peligrosidad\"] == peligrosidad]\n    for _, row in level_data.iterrows():\n        centroid = row[\"geometry\"].centroid\n        jitter_x = np.random.uniform(-200, 200)\n        jitter_y = np.random.uniform(-200, 200)\n        x_pos = centroid.x + jitter_x\n        y_pos = centroid.y + jitter_y\n        color = PELIGROSIDAD_COLORS[row[\"peligrosidad\"]]\n        size = max(10, row[\"edificios_expuestos\"] * 0.5 + 15)\n        ax.scatter(\n            x_pos,\n            y_pos,\n            s=size,\n            color=color,\n            alpha=0.9,\n            edgecolors=\"white\",\n            linewidth=1.0,\n        )\n\n# Leyenda de peligrosidad\nlegend_elements_peligro = [\n    plt.Line2D(\n        [0],\n        [0],\n        marker=\"o\",\n        color=\"w\",\n        markerfacecolor=PELIGROSIDAD_COLORS[\"alta\"],\n        markersize=8,\n        label=\"Alta\",\n    ),\n    plt.Line2D(\n        [0],\n        [0],\n        marker=\"o\",\n        color=\"w\",\n        markerfacecolor=PELIGROSIDAD_COLORS[\"media\"],\n        markersize=8,\n        label=\"Media\",\n    ),\n]\n\n# Leyenda de tamaño\nbuilding_values = [100, 500, 1000]\nlegend_elements_size = []\nfor val in building_values:\n    size = max(10, val * 0.5 + 15)\n    legend_elements_size.append(\n        plt.Line2D(\n            [0],\n            [0],\n            marker=\"o\",\n            color=\"w\",\n            markerfacecolor=\"gray\",\n            markersize=np.sqrt(size / 10),\n            label=f\"{val} edificios\",\n        )\n    )\n\n# Crear leyendas lado a lado en bottom right\nlegend1 = ax.legend(\n    handles=legend_elements_peligro,\n    title=\"Nivel de peligrosidad\",\n    loc=\"lower right\",\n    bbox_to_anchor=(0.85, 0),\n)\nax.add_artist(legend1)\n\nlegend2 = ax.legend(\n    handles=legend_elements_size,\n    title=\"Edificios expuestos\",\n    loc=\"lower right\",\n    bbox_to_anchor=(1.0, 0),\n)\n\n\nadd_boundary_outline(ax, la_plata_3857)\n\n# Agregar escala y flecha norte para consistencia\nadd_scale_bar_and_north_arrow(ax, length=0.20)\n\n# Limpiar el mapa - quitar bordes, ticks, etc.\nax.set_title(\n    \"Exposición de Barrios Populares por Nivel de Peligrosidad\",\n    fontsize=14,\n    fontweight=\"bold\",\n    pad=20,\n)\nax.set_axis_off()\n\nplt.tight_layout()\nplt.show()\n\n\n\n# Crear el gráfico de barras\nfig, ax = plt.subplots(figsize=(12, 8))\nx = np.arange(len(barrios_combined))\nwidth = 0.35\n\nbars1 = ax.bar(\n    x - width / 2,\n    barrios_combined[\"edificios_expuestos_alta\"],\n    width,\n    label=\"Peligro Alto\",\n    color=PELIGROSIDAD_COLORS[\"alta\"],\n)\nbars2 = ax.bar(\n    x + width / 2,\n    barrios_combined[\"edificios_expuestos_media\"],\n    width,\n    label=\"Peligro Medio\",\n    color=PELIGROSIDAD_COLORS[\"media\"],\n)\n\nax.set_xlabel(\"Barrios\", fontsize=12)\nax.set_ylabel(\"Edificios Expuestos\", fontsize=12)\nax.set_title(\"Top 10 Barrios por Edificios Expuestos\", fontsize=14, fontweight=\"bold\")\nax.set_xticks(x)\nax.set_xticklabels(barrios_combined[\"nombre_barrio\"], rotation=45, ha=\"right\")\nax.legend(loc=\"upper right\")\n\n# Agregar valores en las barras\nfor bar in bars1:\n    height = bar.get_height()\n    if height &gt; 0:\n        ax.text(\n            bar.get_x() + bar.get_width() / 2.0,\n            height + 5,\n            f\"{int(height)}\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=10,\n        )\n\nfor bar in bars2:\n    height = bar.get_height()\n    if height &gt; 0:\n        ax.text(\n            bar.get_x() + bar.get_width() / 2.0,\n            height + 5,\n            f\"{int(height)}\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=10,\n        )\n\nplt.tight_layout()\nplt.show()\n\nshow(resultado_exposicion_barrio)\n\n\n\n\n\n\n\n\n\n\n\n(a) Mapa de exposición de barrios populares por nivel de peligrosidad de inundación\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.4.4 from the internet...\n    (need help?)\n    \n\n\n\n\n(c)\n\n\n\n\n\nFigure 3.5\n\n\n\n\n\n\n3.6.3 Exposición por cuenca y eje\n\nMostrar código\n# Crear gráfico de cuencas\nfig1, ax1 = plt.subplots(figsize=DEFAULT_FIGSIZE)\nx = np.arange(len(cuenca_combined))\nwidth = 0.35\n\nbars1 = ax1.bar(\n    x - width / 2,\n    cuenca_combined[\"edificios_expuestos_alta\"],\n    width,\n    label=\"Peligro Alto\",\n    color=PELIGROSIDAD_COLORS[\"alta\"],\n)\nbars2 = ax1.bar(\n    x + width / 2,\n    cuenca_combined[\"edificios_expuestos_media\"],\n    width,\n    label=\"Peligro Medio\",\n    color=PELIGROSIDAD_COLORS[\"media\"],\n)\n\nax1.set_xlabel(\"Cuencas\", fontsize=12)\nax1.set_ylabel(\"Edificios Expuestos\", fontsize=12)\nax1.set_title(\"Cuencas por edificios Expuestas\", fontsize=14, fontweight=\"bold\")\nax1.set_xticks(x)\nax1.set_xticklabels(cuenca_combined[\"Cuenca\"], rotation=45, ha=\"right\")\nax1.legend(loc=\"upper right\")\n\n# Agregar valores en las barras\nfor bar in bars1:\n    height = bar.get_height()\n    if height &gt; 0:\n        ax1.text(\n            bar.get_x() + bar.get_width() / 2.0,\n            height + 20,\n            f\"{int(height)}\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=10,\n        )\n\nfor bar in bars2:\n    height = bar.get_height()\n    if height &gt; 0:\n        ax1.text(\n            bar.get_x() + bar.get_width() / 2.0,\n            height + 20,\n            f\"{int(height)}\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=10,\n        )\n\nplt.tight_layout()\nplt.show()\n\n\n\n# Crear gráfico de ejes\nfig2, ax2 = plt.subplots(figsize=DEFAULT_FIGSIZE)\nx = np.arange(len(eje_combined))\nwidth = 0.35\n\nbars1 = ax2.bar(\n    x - width / 2,\n    eje_combined[\"edificios_expuestos_alta\"],\n    width,\n    label=\"Peligro Alto\",\n    color=PELIGROSIDAD_COLORS[\"alta\"],\n)\nbars2 = ax2.bar(\n    x + width / 2,\n    eje_combined[\"edificios_expuestos_media\"],\n    width,\n    label=\"Peligro Medio\",\n    color=PELIGROSIDAD_COLORS[\"media\"],\n)\n\nax2.set_xlabel(\"Ejes\", fontsize=12)\nax2.set_ylabel(\"Edificios Expuestos\", fontsize=12)\nax2.set_title(\"Ejes por edificios Expuestas\", fontsize=14, fontweight=\"bold\")\nax2.set_xticks(x)\nax2.set_xticklabels(eje_combined[\"eje\"], rotation=45, ha=\"right\")\nax2.legend(loc=\"upper right\")\n\n# Agregar valores en las barras\nfor bar in bars1:\n    height = bar.get_height()\n    if height &gt; 0:\n        ax2.text(\n            bar.get_x() + bar.get_width() / 2.0,\n            height + 10,\n            f\"{int(height)}\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=10,\n        )\n\nfor bar in bars2:\n    height = bar.get_height()\n    if height &gt; 0:\n        ax2.text(\n            bar.get_x() + bar.get_width() / 2.0,\n            height + 10,\n            f\"{int(height)}\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=10,\n        )\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Cuencas por edificios expuestas\n\n\n\n\n\n\n\n\n\n\n\n(b) Ejes por edificios expuestas\n\n\n\n\n\n\n\nFigure 3.6: Exposición por cuencas hidrográficas y ejes territoriales\n\n\n\n\n\n3.6.4 Comparativa de periodos de retorno\nLa implementación de diferentes políticas de gestión de riesgo depende de la evaluación del potencial de exposición, y el escenario de precipitación máxima probable (PMP) se utiliza como el máximo probable de precipitación para los cálculos del modelo hidrológico que requieren priorización. Para políticas que requieren priorización, como la relocalización de residentes en asentamientos informales, es importante elegir un período de retorno que sea apropiado para la política que se está considerando. En este análisis, hemos mostrado diferencias significativas entre la exposición de edificios dependiendo de si se utiliza el escenario PMP, el período de retorno de 25 años, o el período de retorno de 100 años para calcular el riesgo.\n\nMostrar código\n# =============================================================================\n# GRAPHICS: RETURN PERIOD COMPARISON\n# =============================================================================\n\n# Preparar datos de cuenca Maldonado para clipping\ncuenca_maldonado = cuencas[cuencas[\"Cuenca\"] == \"Cuenca A° Maldonado\"].copy()\n\n\n# Rutas de archivos\nr100_path = \"/home/nissim/Documents/dev/fulbright/ciut-riesgo/notebooks/data/raster verctorizados/Peligrosidad_R100_polig.shp\"\nr25_path = \"/home/nissim/Documents/dev/fulbright/ciut-riesgo/notebooks/data/raster verctorizados/Peligrosidad_R25_polig.shp\"\n\n# Color mapping para R100 y R25\ncolor_mapping = {\n    \"Medio\": PELIGROSIDAD_COLORS[\"media\"],\n    \"Alto\": PELIGROSIDAD_COLORS[\"alta\"],\n}\n\n# === MAPA PMP ===\npeligro_pmp_maldonado = gpd.clip(peligro_la_plata, cuenca_maldonado)\npeligro_pmp_maldonado = peligro_pmp_maldonado[\n    peligro_pmp_maldonado[\"PELIGROSID\"].isin([\"alta\", \"media\"])\n]\npeligro_pmp_maldonado_3857 = peligro_pmp_maldonado.to_crs(WEB_MERCATOR_CRS)\n\nfig1, ax1 = create_consistent_map(\n    \"PMP (Precipitación Máxima Probable)\", crs=USE_CRS, boundary_gdf=cuenca_maldonado, attribution=\"Datos: Romanazzi et al. (2019), DIPSOH (2025) | Mapa base: Carto (2025)\", scalebar_length=0.2\n)\npeligro_pmp_maldonado_3857.plot(\n    ax=ax1,\n    color=peligro_pmp_maldonado_3857[\"PELIGROSID\"].map(PELIGROSIDAD_COLORS),\n    alpha=0.75,\n    zorder=5,\n)\nax1.legend(handles=PELIGROSIDAD_LEGEND, loc=\"lower right\")\nplt.tight_layout()\nplt.show()\n\n# === MAPA R100 ===\npelig_100_maldonado = gpd.read_file(r100_path).to_crs(USE_CRS)\npelig_100_maldonado = pelig_100_maldonado[\n    pelig_100_maldonado[\"peli\"].isin([\"Alto\", \"Medio\"])\n]\npelig_100_maldonado_clipped_3857 = gpd.clip(\n    pelig_100_maldonado, cuenca_maldonado\n).to_crs(WEB_MERCATOR_CRS)\n\nfig2, ax2 = create_consistent_map(\n    \"R100 (Período de retorno 100 años)\", crs=USE_CRS, boundary_gdf=cuenca_maldonado, attribution=\"Datos: Carner et al.. (en prensa), DIPSOH (2025) | Mapa base: Carto (2025)\", scalebar_length=0.2\n)\npelig_100_maldonado_clipped_3857.plot(\n    ax=ax2,\n    color=pelig_100_maldonado_clipped_3857[\"peli\"].map(color_mapping),\n    alpha=0.75,\n    zorder=5,\n)\nax2.legend(handles=PELIGROSIDAD_LEGEND, loc=\"lower right\")\nplt.tight_layout()\nplt.show()\n\n# === MAPA R25 ===\npelig_25_maldonado = gpd.read_file(r25_path).to_crs(USE_CRS)\npelig_25_maldonado = pelig_25_maldonado[\n    pelig_25_maldonado[\"peli\"].isin([\"Alto\", \"Medio\"])\n]\npelig_25_maldonado_clipped_3857 = gpd.clip(pelig_25_maldonado, cuenca_maldonado).to_crs(\n    WEB_MERCATOR_CRS\n)\n\nfig3, ax3 = create_consistent_map(\n    \"R25 (Período de retorno 25 años)\", crs=USE_CRS, boundary_gdf=cuenca_maldonado, attribution=\"Datos: Carner et al.. (en prensa), DIPSOH (2025) | Mapa base: Carto (2025)\", scalebar_length=0.2\n)\npelig_25_maldonado_clipped_3857.plot(\n    ax=ax3,\n    color=pelig_25_maldonado_clipped_3857[\"peli\"].map(color_mapping),\n    alpha=0.75,\n    zorder=5,\n)\nax3.legend(handles=PELIGROSIDAD_LEGEND, loc=\"lower right\")\nplt.tight_layout()\nplt.show()\n\n\n# =============================================================================\n# ANALYTICAL PROCESSING: RETURN PERIOD DATA\n# =============================================================================\n\n# Helper function para procesar datos de peligro\ndef process_hazard_data(file_path, buildings):\n    pelig_data = gpd.read_file(file_path).to_crs(USE_CRS)\n    pelig_filtered = pelig_data[pelig_data[\"peli\"].isin([\"Alto\", \"Medio\"])].copy()\n    pelig_simple = pelig_filtered.dissolve(by=\"peli\").reset_index()\n\n    buildings_with_peligro = gpd.sjoin(\n        buildings, pelig_simple[[\"peli\", \"geometry\"]], how=\"left\", predicate=\"within\"\n    )\n    buildings_exposed = buildings_with_peligro.dropna(subset=[\"peli\"]).copy()\n\n    hazard_priority = {\"Alto\": 3, \"Medio\": 2}\n    buildings_exposed.loc[:, \"prioridad\"] = buildings_exposed[\"peli\"].map(\n        hazard_priority\n    )\n    buildings_unique = buildings_exposed.sort_values(\n        \"prioridad\", ascending=False\n    ).drop_duplicates(subset=buildings_exposed.geometry.name, keep=\"first\")\n\n    exposicion = (\n        buildings_unique.groupby(\"peli\").size().reset_index(name=\"edificios_expuestos\")\n    )\n    result = {}\n    for _, row in exposicion.iterrows():\n        peligro_name = \"alta\" if row[\"peli\"] == \"Alto\" else \"media\"\n        result[peligro_name] = row[\"edificios_expuestos\"]\n    return result\n\n\nbuildings_maldonado = buildings_with_barrios.copy()\n\n# === DATOS DE LOS TRES ESCENARIOS ===\n# PMP\nmaldonado_pmp = resultado_exposicion_cuenca[\n    resultado_exposicion_cuenca[\"Cuenca\"] == \"Cuenca A° Maldonado\"\n].copy()\npmp_data = (\n    {\n        row[\"peligrosidad\"]: int(row[\"edificios_expuestos\"])\n        for _, row in maldonado_pmp.iterrows()\n    }\n    if len(maldonado_pmp) &gt; 0\n    else {}\n)\n\n# R25 y R100\nr25_data = process_hazard_data(r25_path, buildings_maldonado)\nr100_data = process_hazard_data(r100_path, buildings_maldonado)\n\n# =============================================================================\n# GRAPHICS: FINAL COMPARISON VISUALIZATION\n# =============================================================================\n\n# === VISUALIZACIÓN COMPARATIVA ===\nescenarios = [\"PMP\", \"R100\", \"R25\"]\nalta_values = [\n    pmp_data.get(\"alta\", 0),\n    r100_data.get(\"alta\", 0),\n    r25_data.get(\"alta\", 0),\n]\nmedia_values = [\n    pmp_data.get(\"media\", 0),\n    r100_data.get(\"media\", 0),\n    r25_data.get(\"media\", 0),\n]\n\n\n\n\n\n\n\n\n\n\n\n\n(a) PMP (Precipitación Máxima Probable)\n\n\n\n\n\n\n\n\n\n\n\n(b) R100 (Período de retorno 100 años)\n\n\n\n\n\n\n\n\n\n\n\n(c) R25 (Período de retorno 25 años)\n\n\n\n\n\n\n\nFigure 3.7: Escenarios de peligrosidad en Cuenca Maldonado\n\n\n\nNuestro análisis de exposición a nivel de edificio en la Cuenca Maldonado bajo los diversos períodos de retorno muestra el impacto del período de retorno elegido sobre la población expuesta calculada. Bajo el escenario de precipitación máxima probable (PMP), observamos 1.000 edificios expuestos a peligro alto y 2.316 edificios expuestos a peligro medio, mientras que bajo el período de retorno de 100 años encontramos 141 edificios en peligro alto y 313 en peligro medio, y bajo el período de retorno de 25 años se identifican 77 edificios en peligro alto y 198 en peligro medio.\nEn términos comparativos, la exposición bajo PMP es 7.1 veces mayor que bajo R100 para peligro alto y 7.4 veces mayor para peligro medio. Comparando PMP con R25, la exposición es 13.0 veces mayor para peligro alto y 11.7 veces mayor para peligro medio. Incluso entre R100 y R25, la exposición es 1.8 veces mayor para peligro alto y 1.6 veces mayor para peligro medio. Estos resultados demuestran las diferencias significativas en las estimaciones de exposición que resultan de la elección del período de retorno para el cálculo del riesgo.\n\n\nMostrar código\nx = np.arange(len(escenarios))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(10, 6))\nbars1 = ax.bar(\n    x - width / 2,\n    alta_values,\n    width,\n    label=\"Peligro Alto\",\n    color=PELIGROSIDAD_COLORS[\"alta\"],\n)\nbars2 = ax.bar(\n    x + width / 2,\n    media_values,\n    width,\n    label=\"Peligro Medio\",\n    color=PELIGROSIDAD_COLORS[\"media\"],\n)\n\nax.set_xlabel(\"Escenario de Precipitación\", fontsize=12)\nax.set_ylabel(\"Edificios Expuestos\", fontsize=12)\nax.set_title(\n    \"Exposición en Cuenca Maldonado por Escenario de Precipitación\",\n    fontsize=14,\n    fontweight=\"bold\",\n)\nax.set_xticks(x)\nax.set_xticklabels(escenarios)\nax.legend(loc=\"upper right\")\n\n\ndef add_value_labels(bars):\n    for bar in bars:\n        height = bar.get_height()\n        if height &gt; 0:\n            ax.text(\n                bar.get_x() + bar.get_width() / 2.0,\n                height + 20,\n                f\"{int(height)}\",\n                ha=\"center\",\n                va=\"bottom\",\n                fontsize=10,\n            )\n\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  },
  {
    "objectID": "renabap.html#comparativa-de-periodos-de-retorno",
    "href": "renabap.html#comparativa-de-periodos-de-retorno",
    "title": "3  RENABAP",
    "section": "3.7 Comparativa de periodos de retorno",
    "text": "3.7 Comparativa de periodos de retorno\nLa implementación de diferentes políticas de gestión de riesgo depende de la evaluación del potencial de exposición, y el escenario de precipitación máxima probable (PMP) se utiliza como el máximo probable de precipitación para los cálculos del modelo hidrológico que requieren priorización. Para políticas que requieren priorización, como la relocalización de residentes en asentamientos informales, es importante elegir un período de retorno que sea apropiado para la política que se está considerando. En este análisis, hemos mostrado diferencias significativas entre la exposición de edificios dependiendo de si se utiliza el escenario PMP, el período de retorno de 25 años, o el período de retorno de 100 años para calcular el riesgo.\n\nMostrar código\n# =============================================================================\n# GRAPHICS: RETURN PERIOD COMPARISON\n# =============================================================================\n\n# Preparar datos de cuenca Maldonado para clipping\ncuenca_maldonado = cuencas[cuencas[\"Cuenca\"] == \"Cuenca A° Maldonado\"].copy()\n\n\n# Rutas de archivos\nr100_path = \"/home/nissim/Documents/dev/fulbright/ciut-riesgo/notebooks/data/raster verctorizados/Peligrosidad_R100_polig.shp\"\nr25_path = \"/home/nissim/Documents/dev/fulbright/ciut-riesgo/notebooks/data/raster verctorizados/Peligrosidad_R25_polig.shp\"\n\n# Color mapping para R100 y R25\ncolor_mapping = {\n    \"Medio\": PELIGROSIDAD_COLORS[\"media\"],\n    \"Alto\": PELIGROSIDAD_COLORS[\"alta\"],\n}\n\n# === MAPA PMP ===\npeligro_pmp_maldonado = gpd.clip(peligro_la_plata, cuenca_maldonado)\npeligro_pmp_maldonado = peligro_pmp_maldonado[\n    peligro_pmp_maldonado[\"PELIGROSID\"].isin([\"alta\", \"media\"])\n]\npeligro_pmp_maldonado_3857 = peligro_pmp_maldonado.to_crs(WEB_MERCATOR_CRS)\n\nfig1, ax1 = create_consistent_map(\n    \"PMP (Precipitación Máxima Probable)\", crs=USE_CRS, boundary_gdf=cuenca_maldonado, attribution=\"Datos: Etulaín et al. (en prensa), DIPSOH (2025) | Mapa base: Carto (2025)\", scalebar_length=0.2\n)\npeligro_pmp_maldonado_3857.plot(\n    ax=ax1,\n    color=peligro_pmp_maldonado_3857[\"PELIGROSID\"].map(PELIGROSIDAD_COLORS),\n    alpha=0.75,\n    zorder=5,\n)\nax1.legend(handles=PELIGROSIDAD_LEGEND, loc=\"lower right\")\nplt.tight_layout()\nplt.show()\n\n# === MAPA R100 ===\npelig_100_maldonado = gpd.read_file(r100_path).to_crs(USE_CRS)\npelig_100_maldonado = pelig_100_maldonado[\n    pelig_100_maldonado[\"peli\"].isin([\"Alto\", \"Medio\"])\n]\npelig_100_maldonado_clipped_3857 = gpd.clip(\n    pelig_100_maldonado, cuenca_maldonado\n).to_crs(WEB_MERCATOR_CRS)\n\nfig2, ax2 = create_consistent_map(\n    \"R100 (Período de retorno 100 años)\", crs=USE_CRS, boundary_gdf=cuenca_maldonado, attribution=\"Datos: Etulaín et al. (en prensa), DIPSOH (2025) | Mapa base: Carto (2025)\", scalebar_length=0.2\n)\npelig_100_maldonado_clipped_3857.plot(\n    ax=ax2,\n    color=pelig_100_maldonado_clipped_3857[\"peli\"].map(color_mapping),\n    alpha=0.75,\n    zorder=5,\n)\nax2.legend(handles=PELIGROSIDAD_LEGEND, loc=\"lower right\")\nplt.tight_layout()\nplt.show()\n\n# === MAPA R25 ===\npelig_25_maldonado = gpd.read_file(r25_path).to_crs(USE_CRS)\npelig_25_maldonado = pelig_25_maldonado[\n    pelig_25_maldonado[\"peli\"].isin([\"Alto\", \"Medio\"])\n]\npelig_25_maldonado_clipped_3857 = gpd.clip(pelig_25_maldonado, cuenca_maldonado).to_crs(\n    WEB_MERCATOR_CRS\n)\n\nfig3, ax3 = create_consistent_map(\n    \"R25 (Período de retorno 25 años)\", crs=USE_CRS, boundary_gdf=cuenca_maldonado, attribution=\"Datos: Etulaín et al. (en prensa), DIPSOH (2025) | Mapa base: Carto (2025)\", scalebar_length=0.2\n)\npelig_25_maldonado_clipped_3857.plot(\n    ax=ax3,\n    color=pelig_25_maldonado_clipped_3857[\"peli\"].map(color_mapping),\n    alpha=0.75,\n    zorder=5,\n)\nax3.legend(handles=PELIGROSIDAD_LEGEND, loc=\"lower right\")\nplt.tight_layout()\nplt.show()\n\n\n# =============================================================================\n# ANALYTICAL PROCESSING: RETURN PERIOD DATA\n# =============================================================================\n\n# Helper function para procesar datos de peligro\ndef process_hazard_data(file_path, buildings):\n    pelig_data = gpd.read_file(file_path).to_crs(USE_CRS)\n    pelig_filtered = pelig_data[pelig_data[\"peli\"].isin([\"Alto\", \"Medio\"])].copy()\n    pelig_simple = pelig_filtered.dissolve(by=\"peli\").reset_index()\n\n    buildings_with_peligro = gpd.sjoin(\n        buildings, pelig_simple[[\"peli\", \"geometry\"]], how=\"left\", predicate=\"within\"\n    )\n    buildings_exposed = buildings_with_peligro.dropna(subset=[\"peli\"]).copy()\n\n    hazard_priority = {\"Alto\": 3, \"Medio\": 2}\n    buildings_exposed.loc[:, \"prioridad\"] = buildings_exposed[\"peli\"].map(\n        hazard_priority\n    )\n    buildings_unique = buildings_exposed.sort_values(\n        \"prioridad\", ascending=False\n    ).drop_duplicates(subset=buildings_exposed.geometry.name, keep=\"first\")\n\n    exposicion = (\n        buildings_unique.groupby(\"peli\").size().reset_index(name=\"edificios_expuestos\")\n    )\n    result = {}\n    for _, row in exposicion.iterrows():\n        peligro_name = \"alta\" if row[\"peli\"] == \"Alto\" else \"media\"\n        result[peligro_name] = row[\"edificios_expuestos\"]\n    return result\n\n\nbuildings_maldonado = buildings_with_barrios.copy()\n\n# === DATOS DE LOS TRES ESCENARIOS ===\n# PMP\nmaldonado_pmp = resultado_exposicion_cuenca[\n    resultado_exposicion_cuenca[\"Cuenca\"] == \"Cuenca A° Maldonado\"\n].copy()\npmp_data = (\n    {\n        row[\"peligrosidad\"]: int(row[\"edificios_expuestos\"])\n        for _, row in maldonado_pmp.iterrows()\n    }\n    if len(maldonado_pmp) &gt; 0\n    else {}\n)\n\n# R25 y R100\nr25_data = process_hazard_data(r25_path, buildings_maldonado)\nr100_data = process_hazard_data(r100_path, buildings_maldonado)\n\n# =============================================================================\n# GRAPHICS: FINAL COMPARISON VISUALIZATION\n# =============================================================================\n\n# === VISUALIZACIÓN COMPARATIVA ===\nescenarios = [\"PMP\", \"R100\", \"R25\"]\nalta_values = [\n    pmp_data.get(\"alta\", 0),\n    r100_data.get(\"alta\", 0),\n    r25_data.get(\"alta\", 0),\n]\nmedia_values = [\n    pmp_data.get(\"media\", 0),\n    r100_data.get(\"media\", 0),\n    r25_data.get(\"media\", 0),\n]\n\n\n\n\n\n\n\n\n\n\n\n\n(a) PMP (Precipitación Máxima Probable)\n\n\n\n\n\n\n\n\n\n\n\n(b) R100 (Período de retorno 100 años)\n\n\n\n\n\n\n\n\n\n\n\n(c) R25 (Período de retorno 25 años)\n\n\n\n\n\n\n\nFigure 3.7: Escenarios de peligrosidad en Cuenca Maldonado\n\n\n\nNuestro análisis de exposición a nivel de edificio en la Cuenca Maldonado bajo los diversos períodos de retorno muestra el impacto del período de retorno elegido sobre la población expuesta calculada. Bajo el escenario de precipitación máxima probable (PMP), observamos 1.000 edificios expuestos a peligro alto y 2.316 edificios expuestos a peligro medio, mientras que bajo el período de retorno de 100 años encontramos 141 edificios en peligro alto y 313 en peligro medio, y bajo el período de retorno de 25 años se identifican 77 edificios en peligro alto y 198 en peligro medio.\nEn términos comparativos, la exposición bajo PMP es 7.1 veces mayor que bajo R100 para peligro alto y 7.4 veces mayor para peligro medio. Comparando PMP con R25, la exposición es 13.0 veces mayor para peligro alto y 11.7 veces mayor para peligro medio. Incluso entre R100 y R25, la exposición es 1.8 veces mayor para peligro alto y 1.6 veces mayor para peligro medio. Estos resultados demuestran las diferencias significativas en las estimaciones de exposición que resultan de la elección del período de retorno para el cálculo del riesgo.\n\n\nMostrar código\nx = np.arange(len(escenarios))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(10, 6))\nbars1 = ax.bar(\n    x - width / 2,\n    alta_values,\n    width,\n    label=\"Peligro Alto\",\n    color=PELIGROSIDAD_COLORS[\"alta\"],\n)\nbars2 = ax.bar(\n    x + width / 2,\n    media_values,\n    width,\n    label=\"Peligro Medio\",\n    color=PELIGROSIDAD_COLORS[\"media\"],\n)\n\nax.set_xlabel(\"Escenario de Precipitación\", fontsize=12)\nax.set_ylabel(\"Edificios Expuestos\", fontsize=12)\nax.set_title(\n    \"Exposición en Cuenca Maldonado por Escenario de Precipitación\",\n    fontsize=14,\n    fontweight=\"bold\",\n)\nax.set_xticks(x)\nax.set_xticklabels(escenarios)\nax.legend(loc=\"upper right\")\n\n\ndef add_value_labels(bars):\n    for bar in bars:\n        height = bar.get_height()\n        if height &gt; 0:\n            ax.text(\n                bar.get_x() + bar.get_width() / 2.0,\n                height + 20,\n                f\"{int(height)}\",\n                ha=\"center\",\n                va=\"bottom\",\n                fontsize=10,\n            )\n\n\nadd_value_labels(bars1)\nadd_value_labels(bars2)\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  },
  {
    "objectID": "renabap.html#conclusiones",
    "href": "renabap.html#conclusiones",
    "title": "3  RENABAP",
    "section": "3.7 Conclusiones",
    "text": "3.7 Conclusiones\nLos datos de huellas de edificios nos permiten realizar evaluaciones significativamente más precisas de la exposición en asentamientos informales en todo el partido y revelan una subestimación crítica en los datos oficiales. Este análisis identifica aproximadamente 41.575 viviendas faltantes que no están contabilizadas en los datos del RENABAP, lo que representa potencialmente entre 125.000 y 208.000 personas no contabilizadas en los asentamientos informales (usando un rango razonable de 3 a 5 personas por vivienda). Esta discrepancia tiene implicaciones profundas para la planificación de gestión de riesgo y la asignación de recursos.\nEn los barrios populares de La Plata se identifican 17.014 edificios expuestas a peligros de inundación bajo el escenario de Precipitación Máxima Probable (PMP), lo que representa el 23.9% del total de edificios en asentamientos informales. De estas, 6.112 edificios se encuentran en zonas de peligro alto (35.9%) y 10.902 en zonas de peligro medio (64.1%). La exposición se concentra principalmente en los alrededores del casco urbano de La Plata, con una distribución característica donde pocos barrios presentan exposición muy alta, seguidos por un grupo de exposición media. Villa Montoro lidera con 669 edificios expuestas a peligro alto (21.7% del barrio), seguido por La Esperanza con 440 edificios (16.3%), Las Palmeras con 417 (33.7%), Toba con 335 (67.7%), y La Isla con 320 edificios (96.4%). A nivel de cuencas hidrográficas, Cuenca Arroyo del Gato concentra la mayor exposición con 7.943 edificios expuestas (23.0% del total de edificios en asentamientos informales de la cuenca; 2.662 a peligro alto y 5.281 a peligro medio), principalmente debido a la presencia de Villa Montoro y otros asentamientos importantes. Le sigue Cuenca A° Maldonado con 3.316 edificios (18.9% del total; 1.000 alta, 2.316 media) y Cuenca Arroyo Martín-Carnaval con 1.096 edificios (49.1% del total; 368 alta, 728 media).\nAdemás, el análisis comparativo de tasas de exposición de edificios para la Cuenca Maldonado bajo diferentes períodos de retorno, incluyendo la precipitación máxima probable (PMP) utilizada en el resto del estudio versus períodos de retorno de 100 años y 25 años, revela que la elección del período de retorno genera diferencias significativas en las tasas de exposición. Encontramos que bajo la PMP se exponen órdenes de magnitud más edificios que bajo los períodos de retorno de 25 y 100 años, lo cual es fundamental considerar al determinar qué áreas priorizar para la reubicación de residentes en asentamientos informales.\nLa comparación metodológica entre interpolación areal y análisis a nivel de edificio demuestra que nuestro enfoque basado en edificios individuales retorna un mayor número total de población expuesta (debido a la identificación de aproximadamente el doble de edificios que los datos oficiales del RENABAP) pero una menor proporción de exposición relativa (23.9% vs 26.3%), lo que demuestra que la interpolación areal sobrestima la exposición relativa al asumir una distribución uniforme de la población. Nuestro método es más confiable porque refleja la distribución real de los edificios en lugar de asumir distribución uniforme, proporcionando evaluaciones de riesgo más precisas.\nEste enfoque basado en edificios no solo proporciona estimaciones más precisas y actualizadas que los métodos tradicionales de interpolación areal, sino que también demuestra la necesidad urgente de actualizar los registros oficiales de asentamientos informales. Los datos globales de huellas de edificios representan una herramienta esencial para comprender la verdadera magnitud de la población en riesgo y para la planificación efectiva de políticas de reducción de riesgo de inundación.\n\n\n\n\nCarner, José Luis, Facundo Ortiz, and Esteban Lacunza. en prensa. “Inundaciones y Resiliencia En Territorios Urbanos Fragmentados. Cuenca Del Arroyo Maldonado. La Plata, Argentina.” In, edited by Juan Carlos Etulain. La Plata, Argentina: Editorial UNLP.\n\n\nDivisión Provincial de Hidráulica - Provincia de Buenos Aires. 2025. “Cuencas Hidrográficas de La Provincia de Buenos Aires.” https://www.minfra.gba.gob.ar/sig_hidraulica/geoserver/dipsoh/wfs.\n\n\nInstituto Geográfico Nacional (IGN). 2025. “División Político Administrativa de Tercer Orden Que Incluye Comunas, Juntas Vecinales y Demás Formas de Gobiernos.” https://wms.ign.gob.ar/geoserver/ign/ows?version=1.0.0.\n\n\nRomanazzi, Pablo et al. 2019. Plan de Reducción Del Riesgo Por Inundaciones En La Región de La Plata. Edited by Sebastián Guerrini, Pablo Morosi, Eduardo Pablo Spinelli, and Josefina López MacKenzie. 1st ed. La Plata: Universidad Nacional de La Plata. Facultad de Ingeniería; Municipalidad de La Plata. https://sedici.unlp.edu.ar/bitstream/handle/10915/165109/Documento_completo.pdf-PDFA.pdf?sequence=1&isAllowed=y.\n\n\nRomanazzi, Pablo Gustavo, Lucas Mena, and Stefanía Valinoti. 2023. “Plan de Reducción Del Riesgo Por Inundación Para La Región de La Plata (Etapa 2): Protocolos Barriales - Versión 2023.” In. La Plata, Argentina: Universidad Nacional de La Plata. Facultad de Ingeniería; Municipalidad de La Plata; Universidad Nacional de La Plata. Facultad de Humanidades y Ciencias de la Educación. https://repositoriosdigitales.mincyt.gob.ar/vufind/Record/SEDICI_ef9555f5bdb342e7f5f7d7f0f3077a2f.\n\n\nSmith, A., P. D. Bates, O. Wing, et al. 2019. “New Estimates of Flood Exposure in Developing Countries Using High-Resolution Population Data.” Nature Communications 10: 1814. https://doi.org/10.1038/s41467-019-09282-y.\n\n\nVIDA. 2023. “Google-Microsoft-OSM Open Buildings - Combined by VIDA.” https://source.coop/repositories/vida/google-microsoft-osm-open-buildings/access.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RENABAP</span>"
    ]
  }
]